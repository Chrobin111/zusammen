
// Code generated by stanc v2.30.1
#include <stan/model/model_header.hpp>
namespace pgstat_test_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 47> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 6, column 4 to column 10)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 7, column 11 to column 12)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 7, column 4 to column 30)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 8, column 11 to column 12)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 8, column 4 to column 32)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 9, column 11 to column 12)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 9, column 4 to column 32)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 10, column 11 to column 12)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 10, column 4 to column 36)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 11, column 10 to column 11)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 11, column 4 to column 37)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 12, column 10 to column 11)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 12, column 4 to column 40)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 13, column 4 to column 19)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 14, column 4 to column 22)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 18, column 4 to line 22, column 6)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 23, column 4 to column 45)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 24, column 4 to column 48)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 3, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 5, column 9, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 5, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 6, column 9, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 6, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 8, column 9, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 8, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 12, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 1, column 129, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 20, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 21, column 9, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 21, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 22, column 9, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 22, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 23, column 9, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 23, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 24, column 9, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 24, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 26, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 40, column 6, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 39, column 13, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 36, column 6, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 35, column 53, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 35, column 4, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 34, column 49, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 34, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 44, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 18, column 176, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat_test.stan', line 2, column 0)"};

struct pgstat_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_col_vector<T2__>,
                                stan::is_vt_not_complex<T2__>,
                                stan::is_col_vector<T3__>,
                                stan::is_vt_not_complex<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                       stan::base_type_t<T2__>, stan::base_type_t<T3__>>, -1, 1>
  operator()(const T0__& observed_counts, const T1__& background_counts,
             const T2__& background_error, const T3__& expected_model_counts,
             const std::vector<int>& idx_background_zero,
             const std::vector<int>& idx_background_nonzero,
             std::ostream* pstream__) const;
};
struct background_model_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_col_vector<T2__>,
                                stan::is_vt_not_complex<T2__>,
                                stan::is_col_vector<T3__>,
                                stan::is_vt_not_complex<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                       stan::base_type_t<T2__>, stan::base_type_t<T3__>>, -1, 1>
  operator()(const T0__& observed_counts, const T1__& background_counts,
             const T2__& background_error, const T3__& expected_model_counts,
             std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>, stan::base_type_t<T3__>>, -1, 1>
  background_model(const T0__& observed_counts_arg__,
                   const T1__& background_counts_arg__,
                   const T2__& background_error_arg__,
                   const T3__& expected_model_counts_arg__,
                   std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>,
                                 stan::base_type_t<T1__>,
                                 stan::base_type_t<T2__>,
                                 stan::base_type_t<T3__>>;
    int current_statement__ = 0; 
    const auto& observed_counts = stan::math::to_ref(observed_counts_arg__);
    const auto& background_counts = stan::math::to_ref(background_counts_arg__);
    const auto& background_error = stan::math::to_ref(background_error_arg__);
    const auto& expected_model_counts = stan::math::to_ref(expected_model_counts_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int N = std::numeric_limits<int>::min();
      current_statement__ = 19;
      N = stan::math::num_elements(expected_model_counts);
      current_statement__ = 20;
      stan::math::validate_non_negative_index("MB", "N", N);
      Eigen::Matrix<local_scalar_t__, -1, 1> MB =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 21;
      stan::model::assign(MB,
        stan::math::add(background_counts, expected_model_counts),
        "assigning variable MB");
      current_statement__ = 22;
      stan::math::validate_non_negative_index("s2", "N", N);
      Eigen::Matrix<local_scalar_t__, -1, 1> s2 =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 23;
      stan::model::assign(s2, stan::math::square(background_error),
        "assigning variable s2");
      current_statement__ = 24;
      stan::math::validate_non_negative_index("b", "N", N);
      Eigen::Matrix<local_scalar_t__, -1, 1> b =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 25;
      stan::model::assign(b,
        stan::math::multiply(0.5,
          stan::math::subtract(
            stan::math::subtract(
              stan::math::add(
                stan::math::sqrt(
                  stan::math::add(
                    stan::math::subtract(stan::math::square(MB),
                      stan::math::elt_multiply(stan::math::multiply(2, s2),
                        stan::math::subtract(MB,
                          stan::math::multiply(2, observed_counts)))),
                    stan::math::square(s2))), background_counts),
              expected_model_counts), s2)), "assigning variable b");
      current_statement__ = 26;
      return b;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>, stan::base_type_t<T3__>>, -1, 1>
  pgstat(const T0__& observed_counts_arg__,
         const T1__& background_counts_arg__,
         const T2__& background_error_arg__,
         const T3__& expected_model_counts_arg__,
         const std::vector<int>& idx_background_zero,
         const std::vector<int>& idx_background_nonzero,
         std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>,
                                 stan::base_type_t<T1__>,
                                 stan::base_type_t<T2__>,
                                 stan::base_type_t<T3__>>;
    int current_statement__ = 0; 
    const auto& observed_counts = stan::math::to_ref(observed_counts_arg__);
    const auto& background_counts = stan::math::to_ref(background_counts_arg__);
    const auto& background_error = stan::math::to_ref(background_error_arg__);
    const auto& expected_model_counts = stan::math::to_ref(expected_model_counts_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int N = std::numeric_limits<int>::min();
      current_statement__ = 28;
      N = stan::math::num_elements(expected_model_counts);
      current_statement__ = 29;
      stan::math::validate_non_negative_index("log_likes", "N", N);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_likes =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 31;
      stan::math::validate_non_negative_index("s2", "N", N);
      Eigen::Matrix<local_scalar_t__, -1, 1> s2 =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 32;
      stan::model::assign(s2, stan::math::square(background_error),
        "assigning variable s2");
      current_statement__ = 33;
      stan::math::validate_non_negative_index("b", "N", N);
      Eigen::Matrix<local_scalar_t__, -1, 1> b =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 34;
      stan::model::assign(b,
        background_model(observed_counts, background_counts,
          background_error, expected_model_counts, pstream__),
        "assigning variable b");
      current_statement__ = 35;
      stan::math::validate_non_negative_index("factorial_term", "N", N);
      Eigen::Matrix<local_scalar_t__, -1, 1> factorial_term =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N, DUMMY_VAR__);
      current_statement__ = 36;
      stan::model::assign(factorial_term,
        stan::math::add(expected_model_counts,
          stan::math::lgamma(stan::math::add(observed_counts, 1))),
        "assigning variable factorial_term");
      current_statement__ = 37;
      stan::model::assign(log_likes,
        stan::math::subtract(
          stan::math::subtract(
            stan::math::subtract(
              stan::math::subtract(
                stan::math::add(
                  stan::math::elt_divide(
                    stan::math::minus(
                      stan::math::square(
                        stan::math::subtract(
                          stan::model::rvalue(b, "b",
                            stan::model::index_multi(idx_background_nonzero)),
                          stan::model::rvalue(background_counts,
                            "background_counts",
                            stan::model::index_multi(idx_background_nonzero))))),
                    stan::math::multiply(2,
                      stan::model::rvalue(s2, "s2",
                        stan::model::index_multi(idx_background_nonzero)))),
                  stan::math::elt_multiply(
                    stan::model::rvalue(observed_counts, "observed_counts",
                      stan::model::index_multi(idx_background_nonzero)),
                    stan::math::log(
                      stan::math::add(
                        stan::model::rvalue(b, "b",
                          stan::model::index_multi(idx_background_nonzero)),
                        stan::model::rvalue(expected_model_counts,
                          "expected_model_counts",
                          stan::model::index_multi(idx_background_nonzero)))))),
                stan::model::rvalue(b, "b",
                  stan::model::index_multi(idx_background_nonzero))),
              stan::model::rvalue(factorial_term, "factorial_term",
                stan::model::index_multi(idx_background_nonzero))),
            (0.5 * stan::math::log((2 * stan::math::pi())))),
          stan::math::log(
            stan::model::rvalue(background_error, "background_error",
              stan::model::index_multi(idx_background_nonzero)))),
        "assigning variable log_likes", stan::model::index_multi(idx_background_nonzero));
      current_statement__ = 44;
      for (int n = 1; n <= stan::math::num_elements(idx_background_zero); ++n) {
        current_statement__ = 42;
        if (stan::math::logical_gt(
              stan::model::rvalue(observed_counts, "observed_counts",
                stan::model::index_uni(stan::model::rvalue(
                                         idx_background_zero,
                                         "idx_background_zero",
                                         stan::model::index_uni(n)))), 0)) {
          current_statement__ = 40;
          stan::model::assign(log_likes,
            (stan::math::multiply_log(
               stan::model::rvalue(observed_counts, "observed_counts",
                 stan::model::index_uni(stan::model::rvalue(
                                          idx_background_zero,
                                          "idx_background_zero",
                                          stan::model::index_uni(n)))),
               stan::model::rvalue(expected_model_counts,
                 "expected_model_counts",
                 stan::model::index_uni(stan::model::rvalue(
                                          idx_background_zero,
                                          "idx_background_zero",
                                          stan::model::index_uni(n))))) -
              stan::model::rvalue(factorial_term, "factorial_term",
                stan::model::index_uni(stan::model::rvalue(
                                         idx_background_zero,
                                         "idx_background_zero",
                                         stan::model::index_uni(n))))),
            "assigning variable log_likes", stan::model::index_uni(stan::model::rvalue(
                                                                    idx_background_zero,
                                                                    "idx_background_zero",
                                                                    stan::model::index_uni(n))));
        } else {
          current_statement__ = 38;
          stan::model::assign(log_likes,
            -stan::model::rvalue(factorial_term, "factorial_term",
               stan::model::index_uni(stan::model::rvalue(
                                        idx_background_zero,
                                        "idx_background_zero",
                                        stan::model::index_uni(n)))),
            "assigning variable log_likes", stan::model::index_uni(stan::model::rvalue(
                                                                    idx_background_zero,
                                                                    "idx_background_zero",
                                                                    stan::model::index_uni(n))));
        }
      }
      current_statement__ = 45;
      return log_likes;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>, stan::base_type_t<T3__>>, -1, 1>
pgstat_functor__::operator()(const T0__& observed_counts,
                             const T1__& background_counts,
                             const T2__& background_error,
                             const T3__& expected_model_counts,
                             const std::vector<int>& idx_background_zero,
                             const std::vector<int>& idx_background_nonzero,
                             std::ostream* pstream__)  const
{
  return pgstat(observed_counts, background_counts, background_error,
           expected_model_counts, idx_background_zero,
           idx_background_nonzero, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>, stan::base_type_t<T3__>>, -1, 1>
background_model_functor__::operator()(const T0__& observed_counts,
                                       const T1__& background_counts,
                                       const T2__& background_error,
                                       const T3__& expected_model_counts,
                                       std::ostream* pstream__)  const
{
  return background_model(observed_counts, background_counts,
           background_error, expected_model_counts, pstream__);
}

 class pgstat_test_model final : public model_base_crtp<pgstat_test_model> {

 private:
  int N;
  Eigen::Matrix<double, -1, 1> observed_counts_data__;
  Eigen::Matrix<double, -1, 1> background_counts_data__;
  Eigen::Matrix<double, -1, 1> background_errors_data__;
  Eigen::Matrix<double, -1, 1> expected_model_counts_data__;
  std::vector<int> idx_background_zero;
  std::vector<int> idx_background_nonzero;
  int N_bkg_zero;
  int N_bkg_nonzero; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> observed_counts{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> background_counts{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> background_errors{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> expected_model_counts{nullptr, 0};
 
 public:
  ~pgstat_test_model() { }
  
  inline std::string model_name() const final { return "pgstat_test_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.30.1", "stancflags = --include-paths=/Users/chrobin/Documents/zusammen/zusammen/stan_models"};
  }
  
  
  pgstat_test_model(stan::io::var_context& context__,
                    unsigned int random_seed__ = 0,
                    std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "pgstat_test_model_namespace::pgstat_test_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 1;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 1;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 2;
      stan::math::validate_non_negative_index("observed_counts", "N", N);
      current_statement__ = 3;
      context__.validate_dims("data initialization","observed_counts",
          "double", std::vector<size_t>{static_cast<size_t>(N)});
      observed_counts_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&observed_counts) Eigen::Map<Eigen::Matrix<double, -1, 1>>(observed_counts_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> observed_counts_flat__;
        current_statement__ = 3;
        observed_counts_flat__ = context__.vals_r("observed_counts");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(observed_counts,
            observed_counts_flat__[(pos__ - 1)],
            "assigning variable observed_counts", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 4;
      stan::math::validate_non_negative_index("background_counts", "N", N);
      current_statement__ = 5;
      context__.validate_dims("data initialization","background_counts",
          "double", std::vector<size_t>{static_cast<size_t>(N)});
      background_counts_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&background_counts) Eigen::Map<Eigen::Matrix<double, -1, 1>>(background_counts_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> background_counts_flat__;
        current_statement__ = 5;
        background_counts_flat__ = context__.vals_r("background_counts");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(background_counts,
            background_counts_flat__[(pos__ - 1)],
            "assigning variable background_counts", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 6;
      stan::math::validate_non_negative_index("background_errors", "N", N);
      current_statement__ = 7;
      context__.validate_dims("data initialization","background_errors",
          "double", std::vector<size_t>{static_cast<size_t>(N)});
      background_errors_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&background_errors) Eigen::Map<Eigen::Matrix<double, -1, 1>>(background_errors_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> background_errors_flat__;
        current_statement__ = 7;
        background_errors_flat__ = context__.vals_r("background_errors");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 7;
          stan::model::assign(background_errors,
            background_errors_flat__[(pos__ - 1)],
            "assigning variable background_errors", stan::model::index_uni(sym1__));
          current_statement__ = 7;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 8;
      stan::math::validate_non_negative_index("expected_model_counts", "N", N);
      current_statement__ = 9;
      context__.validate_dims("data initialization","expected_model_counts",
          "double", std::vector<size_t>{static_cast<size_t>(N)});
      expected_model_counts_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&expected_model_counts) Eigen::Map<Eigen::Matrix<double, -1, 1>>(expected_model_counts_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> expected_model_counts_flat__;
        current_statement__ = 9;
        expected_model_counts_flat__ = context__.vals_r("expected_model_counts");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 9;
          stan::model::assign(expected_model_counts,
            expected_model_counts_flat__[(pos__ - 1)],
            "assigning variable expected_model_counts", stan::model::index_uni(sym1__));
          current_statement__ = 9;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 10;
      stan::math::validate_non_negative_index("idx_background_zero", "N", N);
      current_statement__ = 11;
      context__.validate_dims("data initialization","idx_background_zero",
          "int", std::vector<size_t>{static_cast<size_t>(N)});
      idx_background_zero = 
        std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 11;
      idx_background_zero = context__.vals_i("idx_background_zero");
      current_statement__ = 12;
      stan::math::validate_non_negative_index("idx_background_nonzero", "N",
                                              N);
      current_statement__ = 13;
      context__.validate_dims("data initialization","idx_background_nonzero",
          "int", std::vector<size_t>{static_cast<size_t>(N)});
      idx_background_nonzero = 
        std::vector<int>(N, std::numeric_limits<int>::min());
      
      
      current_statement__ = 13;
      idx_background_nonzero = context__.vals_i("idx_background_nonzero");
      current_statement__ = 14;
      context__.validate_dims("data initialization","N_bkg_zero","int",
           std::vector<size_t>{});
      N_bkg_zero = std::numeric_limits<int>::min();
      
      
      current_statement__ = 14;
      N_bkg_zero = context__.vals_i("N_bkg_zero")[(1 - 1)];
      current_statement__ = 15;
      context__.validate_dims("data initialization","N_bkg_nonzero","int",
           std::vector<size_t>{});
      N_bkg_nonzero = std::numeric_limits<int>::min();
      
      
      current_statement__ = 15;
      N_bkg_nonzero = context__.vals_i("N_bkg_nonzero")[(1 - 1)];
      current_statement__ = 16;
      if (pstream__) {
        stan::math::stan_print(pstream__, pgstat(observed_counts,
                                            background_counts,
                                            background_errors,
                                            expected_model_counts,
                                            stan::model::rvalue(
                                              idx_background_zero,
                                              "idx_background_zero",
                                              stan::model::index_min_max(1, N_bkg_zero)),
                                            stan::model::rvalue(
                                              idx_background_nonzero,
                                              "idx_background_nonzero",
                                              stan::model::index_min_max(1, N_bkg_nonzero)), pstream__));
        stan::math::stan_print(pstream__, "\n");
      }
      current_statement__ = 17;
      if (pstream__) {
        stan::math::stan_print(pstream__, stan::math::num_elements(
                                            idx_background_zero));
        stan::math::stan_print(pstream__, "\n");
      }
      current_statement__ = 18;
      if (pstream__) {
        stan::math::stan_print(pstream__, stan::math::num_elements(
                                            idx_background_nonzero));
        stan::math::stan_print(pstream__, "\n");
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "pgstat_test_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "pgstat_test_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 0> names__{};
      const std::array<Eigen::Index, 0> constrain_param_sizes__{};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } using stan_model = pgstat_test_model_namespace::pgstat_test_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return pgstat_test_model_namespace::profiles__;
}

#endif


