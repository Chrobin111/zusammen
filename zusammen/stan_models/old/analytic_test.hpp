
// Code generated by stanc v2.30.1
#include <stan/model/model_header.hpp>
namespace analytic_test_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 44> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 6, column 4 to column 10)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 7, column 10 to column 11)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 7, column 4 to column 24)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 8, column 10 to column 11)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 8, column 4 to column 21)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 9, column 10 to column 11)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 9, column 4 to column 30)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 13, column 4 to column 29)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 14, column 4 to column 16)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 15, column 4 to column 15)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 16, column 4 to column 11)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 17, column 4 to column 45)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 18, column 4 to column 45)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 19, column 4 to column 59)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 20, column 4 to column 60)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 25, column 16 to column 44)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 26, column 16 to column 38)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 27, column 16 to column 49)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 29, column 16 to column 92)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 30, column 16 to column 36)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 32, column 16 to column 127)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 37, column 16 to column 26)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 24, column 27 to line 38, column 13)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 24, column 12 to line 38, column 13)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 23, column 22 to line 39, column 9)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 23, column 8 to line 39, column 9)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 22, column 18 to line 40, column 5)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 22, column 4 to line 40, column 5)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 4, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 5, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 7, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 2, column 61, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 18, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 14, column 58, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 28, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 24, column 56, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 36, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 38, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 34, column 78, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 47, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 45, column 73, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 56, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 54, column 132, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/analytic_test.stan', line 2, column 0)"};

struct cpl_flux_integrand_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__>
  operator()(const T0__& x, const T1__& xc, const std::vector<T2__>& theta,
             const std::vector<T3__>& x_r, const std::vector<int>& x_i,
             std::ostream* pstream__) const;
};
struct integral_flux_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__, typename T6__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_col_vector<T2__>,
                                stan::is_vt_not_complex<T2__>,
                                stan::is_col_vector<T3__>,
                                stan::is_vt_not_complex<T3__>,
                                stan::is_stan_scalar<T4__>,
                                stan::is_stan_scalar<T5__>,
                                stan::is_stan_scalar<T6__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                       stan::base_type_t<T2__>, stan::base_type_t<T3__>, T4__,
                       stan::promote_args_t<T5__, T6__>>, -1, 1>
  operator()(const T0__& ebounds_lo, const T1__& ebounds_hi,
             const T2__& ebounds_add, const T3__& ebounds_half,
             const T4__& norm, const T5__& ec, const T6__& alpha,
             std::ostream* pstream__) const;
};
struct cpl_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>, -1, 1>
  operator()(const T0__& energy, const T1__& norm, const T2__& ec,
             const T3__& alpha, std::ostream* pstream__) const;
};
struct differential_flux_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>, -1, 1>
  operator()(const T0__& energy, const T1__& norm, const T2__& ec,
             const T3__& alpha, std::ostream* pstream__) const;
};
struct cpl_indi_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__>
  operator()(const T0__& energy, const T1__& K, const T2__& alpha,
             const T3__& ec, std::ostream* pstream__) const;
};
struct ggrb_int_cpl_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__>
  operator()(const T0__& alpha, const T1__& ec, const T2__& emin,
             const T3__& emax, std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__>
  ggrb_int_cpl(const T0__& alpha, const T1__& ec, const T2__& emin,
               const T3__& emax, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ i1 = DUMMY_VAR__;
      current_statement__ = 29;
      i1 = (stan::math::gamma_q((2 + alpha), (emin / ec)) *
             stan::math::tgamma((2 + alpha)));
      local_scalar_t__ i2 = DUMMY_VAR__;
      current_statement__ = 30;
      i2 = (stan::math::gamma_q((2 + alpha), (emax / ec)) *
             stan::math::tgamma((2 + alpha)));
      current_statement__ = 31;
      return (-stan::math::square(ec) * (i2 - i1));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>, -1, 1>
  cpl(const T0__& energy_arg__, const T1__& norm, const T2__& ec,
      const T3__& alpha, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    const auto& energy = stan::math::to_ref(energy_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 33;
      return stan::math::elt_multiply(
               stan::math::multiply(norm, stan::math::pow(energy, alpha)),
               stan::math::exp(
                 stan::math::divide(stan::math::minus(energy), ec)));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__>
  cpl_indi(const T0__& energy, const T1__& K, const T2__& alpha,
           const T3__& ec, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 35;
      return ((K * stan::math::pow(energy, alpha)) *
               stan::math::exp((-energy / ec)));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__>
  cpl_flux_integrand(const T0__& x, const T1__& xc,
                     const std::vector<T2__>& theta,
                     const std::vector<T3__>& x_r,
                     const std::vector<int>& x_i, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ out = DUMMY_VAR__;
      current_statement__ = 37;
      out = (x *
              cpl_indi(x,
                stan::model::rvalue(theta, "theta",
                  stan::model::index_uni(1)),
                stan::model::rvalue(theta, "theta",
                  stan::model::index_uni(2)),
                stan::model::rvalue(theta, "theta",
                  stan::model::index_uni(3)), pstream__));
      current_statement__ = 38;
      return out;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>, -1, 1>
  differential_flux(const T0__& energy_arg__, const T1__& norm,
                    const T2__& ec, const T3__& alpha,
                    std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    const auto& energy = stan::math::to_ref(energy_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 40;
      return cpl(energy, norm, ec, alpha, pstream__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>, stan::base_type_t<T3__>, T4__,
                     stan::promote_args_t<T5__, T6__>>, -1, 1>
  integral_flux(const T0__& ebounds_lo_arg__, const T1__& ebounds_hi_arg__,
                const T2__& ebounds_add_arg__,
                const T3__& ebounds_half_arg__, const T4__& norm,
                const T5__& ec, const T6__& alpha, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>,
                                 stan::base_type_t<T1__>,
                                 stan::base_type_t<T2__>,
                                 stan::base_type_t<T3__>, T4__,
                                 stan::promote_args_t<T5__, T6__>>;
    int current_statement__ = 0; 
    const auto& ebounds_lo = stan::math::to_ref(ebounds_lo_arg__);
    const auto& ebounds_hi = stan::math::to_ref(ebounds_hi_arg__);
    const auto& ebounds_add = stan::math::to_ref(ebounds_add_arg__);
    const auto& ebounds_half = stan::math::to_ref(ebounds_half_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 42;
      return stan::math::elt_multiply(ebounds_add,
               stan::math::add(
                 stan::math::add(
                   differential_flux(ebounds_lo, norm, ec, alpha, pstream__),
                   stan::math::multiply(4,
                     differential_flux(ebounds_half, norm, ec,
                       alpha, pstream__))),
                 differential_flux(ebounds_hi, norm, ec, alpha, pstream__)));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__>
cpl_flux_integrand_functor__::operator()(const T0__& x, const T1__& xc,
                                         const std::vector<T2__>& theta,
                                         const std::vector<T3__>& x_r,
                                         const std::vector<int>& x_i,
                                         std::ostream* pstream__)  const
{
  return cpl_flux_integrand(x, xc, theta, x_r, x_i, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>, stan::base_type_t<T3__>, T4__,
                     stan::promote_args_t<T5__, T6__>>, -1, 1>
integral_flux_functor__::operator()(const T0__& ebounds_lo,
                                    const T1__& ebounds_hi,
                                    const T2__& ebounds_add,
                                    const T3__& ebounds_half,
                                    const T4__& norm, const T5__& ec,
                                    const T6__& alpha,
                                    std::ostream* pstream__)  const
{
  return integral_flux(ebounds_lo, ebounds_hi, ebounds_add, ebounds_half,
           norm, ec, alpha, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>, -1, 1>
cpl_functor__::operator()(const T0__& energy, const T1__& norm,
                          const T2__& ec, const T3__& alpha,
                          std::ostream* pstream__)  const
{
  return cpl(energy, norm, ec, alpha, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>, -1, 1>
differential_flux_functor__::operator()(const T0__& energy, const T1__& norm,
                                        const T2__& ec, const T3__& alpha,
                                        std::ostream* pstream__)  const
{
  return differential_flux(energy, norm, ec, alpha, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__>
cpl_indi_functor__::operator()(const T0__& energy, const T1__& K,
                               const T2__& alpha, const T3__& ec,
                               std::ostream* pstream__)  const
{
  return cpl_indi(energy, K, alpha, ec, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__>
ggrb_int_cpl_functor__::operator()(const T0__& alpha, const T1__& ec,
                                   const T2__& emin, const T3__& emax,
                                   std::ostream* pstream__)  const
{
  return ggrb_int_cpl(alpha, ec, emin, emax, pstream__);
}


class analytic_test_model final : public model_base_crtp<analytic_test_model> {

 private:
  int N;
  std::vector<double> alpha;
  std::vector<double> ec;
  std::vector<double> energy_flux;
  double erg2kev;
  std::vector<double> x_r;
  std::vector<int> x_i;
  double K;
  Eigen::Matrix<double, -1, 1> ebounds_lo_data__;
  Eigen::Matrix<double, -1, 1> ebounds_hi_data__;
  Eigen::Matrix<double, -1, 1> ebounds_add_data__;
  Eigen::Matrix<double, -1, 1> ebounds_half_data__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> ebounds_lo{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> ebounds_hi{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> ebounds_add{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> ebounds_half{nullptr, 0};
 
 public:
  ~analytic_test_model() { }
  
  inline std::string model_name() const final { return "analytic_test_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.30.1", "stancflags = --include-paths=/Users/chrobin/Documents/zusammen/zusammen/stan_models"};
  }
  
  
  analytic_test_model(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "analytic_test_model_namespace::analytic_test_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 1;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 1;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 2;
      stan::math::validate_non_negative_index("alpha", "N", N);
      current_statement__ = 3;
      context__.validate_dims("data initialization","alpha","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      alpha = 
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 3;
      alpha = context__.vals_r("alpha");
      current_statement__ = 4;
      stan::math::validate_non_negative_index("ec", "N", N);
      current_statement__ = 5;
      context__.validate_dims("data initialization","ec","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      ec = std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 5;
      ec = context__.vals_r("ec");
      current_statement__ = 6;
      stan::math::validate_non_negative_index("energy_flux", "N", N);
      current_statement__ = 7;
      context__.validate_dims("data initialization","energy_flux","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      energy_flux = 
        std::vector<double>(N, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 7;
      energy_flux = context__.vals_r("energy_flux");
      current_statement__ = 8;
      erg2kev = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 8;
      erg2kev = 6.24151e8;
      current_statement__ = 9;
      x_r = std::vector<double>(0, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 10;
      x_i = std::vector<int>(0, std::numeric_limits<int>::min());
      
      
      current_statement__ = 11;
      K = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 12;
      ebounds_lo_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(3,
          std::numeric_limits<double>::quiet_NaN());
      new (&ebounds_lo) Eigen::Map<Eigen::Matrix<double, -1, 1>>(ebounds_lo_data__.data(), 3);
        
      
      current_statement__ = 12;
      stan::model::assign(ebounds_lo, (Eigen::Matrix<double,-1,1>(3) << 100.,
        105., 110.).finished(), "assigning variable ebounds_lo");
      current_statement__ = 13;
      ebounds_hi_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(3,
          std::numeric_limits<double>::quiet_NaN());
      new (&ebounds_hi) Eigen::Map<Eigen::Matrix<double, -1, 1>>(ebounds_hi_data__.data(), 3);
        
      
      current_statement__ = 13;
      stan::model::assign(ebounds_hi, (Eigen::Matrix<double,-1,1>(3) << 105.,
        110., 115.).finished(), "assigning variable ebounds_hi");
      current_statement__ = 14;
      ebounds_add_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(3,
          std::numeric_limits<double>::quiet_NaN());
      new (&ebounds_add) Eigen::Map<Eigen::Matrix<double, -1, 1>>(ebounds_add_data__.data(), 3);
        
      
      current_statement__ = 14;
      stan::model::assign(ebounds_add,
        stan::math::divide(stan::math::subtract(ebounds_hi, ebounds_lo), 6.),
        "assigning variable ebounds_add");
      current_statement__ = 15;
      ebounds_half_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(3,
          std::numeric_limits<double>::quiet_NaN());
      new (&ebounds_half) Eigen::Map<Eigen::Matrix<double, -1, 1>>(ebounds_half_data__.data(), 3);
        
      
      current_statement__ = 15;
      stan::model::assign(ebounds_half,
        stan::math::divide(stan::math::add(ebounds_hi, ebounds_lo), 2.),
        "assigning variable ebounds_half");
      current_statement__ = 28;
      for (int i = 1; i <= N; ++i) {
        current_statement__ = 26;
        for (int j = 1; j <= N; ++j) {
          current_statement__ = 24;
          for (int k = 1; k <= N; ++k) {
            current_statement__ = 16;
            if (pstream__) {
              stan::math::stan_print(pstream__, "alpha = ");
              stan::math::stan_print(pstream__, stan::model::rvalue(alpha,
                                                  "alpha",
                                                  stan::model::index_uni(i)));
              stan::math::stan_print(pstream__, "\n");
            }
            current_statement__ = 17;
            if (pstream__) {
              stan::math::stan_print(pstream__, "ec = ");
              stan::math::stan_print(pstream__, stan::model::rvalue(ec, "ec",
                                                  stan::model::index_uni(j)));
              stan::math::stan_print(pstream__, "\n");
            }
            current_statement__ = 18;
            if (pstream__) {
              stan::math::stan_print(pstream__, "flux = ");
              stan::math::stan_print(pstream__, stan::model::rvalue(
                                                  energy_flux, "energy_flux",
                                                  stan::model::index_uni(k)));
              stan::math::stan_print(pstream__, "\n");
            }
            current_statement__ = 19;
            K = ((erg2kev *
                   stan::model::rvalue(energy_flux, "energy_flux",
                     stan::model::index_uni(k))) *
                  stan::math::inv(
                    ggrb_int_cpl(
                      stan::model::rvalue(alpha, "alpha",
                        stan::model::index_uni(i)),
                      stan::model::rvalue(ec, "ec",
                        stan::model::index_uni(j)), 10, 10e4, pstream__)));
            current_statement__ = 20;
            if (pstream__) {
              stan::math::stan_print(pstream__, "Exakt: ");
              stan::math::stan_print(pstream__, K);
              stan::math::stan_print(pstream__, "\n");
            }
            current_statement__ = 21;
            if (pstream__) {
              stan::math::stan_print(pstream__, "Integral Flux: ");
              stan::math::stan_print(pstream__, integral_flux(ebounds_lo,
                                                  ebounds_hi, ebounds_add,
                                                  ebounds_half, K,
                                                  stan::model::rvalue(ec,
                                                    "ec",
                                                    stan::model::index_uni(j)),
                                                  stan::model::rvalue(alpha,
                                                    "alpha",
                                                    stan::model::index_uni(i)), pstream__));
              stan::math::stan_print(pstream__, "\n");
            }
            current_statement__ = 22;
            if (pstream__) {
              stan::math::stan_print(pstream__, "");
              stan::math::stan_print(pstream__, "\n");
            }
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "analytic_test_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "analytic_test_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 0> names__{};
      const std::array<Eigen::Index, 0> constrain_param_sizes__{};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = analytic_test_model_namespace::analytic_test_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return analytic_test_model_namespace::profiles__;
}

#endif


