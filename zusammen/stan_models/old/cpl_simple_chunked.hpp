
// Code generated by stanc v2.30.1
#include <stan/model/model_header.hpp>
namespace cpl_simple_chunked_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 163> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 89, column 2 to column 48)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 90, column 2 to column 38)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 91, column 2 to column 37)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 99, column 2 to column 43)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 100, column 2 to column 41)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 118, column 2 to column 20)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 120, column 2 to column 24)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 122, column 2 to column 25)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 123, column 2 to column 24)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 125, column 2 to column 358)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 11, column 2 to column 27)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 12, column 2 to column 18)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 13, column 2 to column 17)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 15, column 8 to column 19)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 15, column 2 to column 41)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 16, column 8 to column 19)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 16, column 2 to column 54)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 17, column 8 to column 19)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 17, column 22 to column 33)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 17, column 2 to column 56)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 19, column 8 to column 19)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 19, column 2 to column 32)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 20, column 2 to column 13)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 23, column 8 to column 19)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 23, column 21 to column 32)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 23, column 41 to column 52)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 23, column 2 to column 65)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 24, column 8 to column 19)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 24, column 21 to column 32)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 24, column 41 to column 52)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 24, column 2 to column 65)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 27, column 8 to column 19)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 27, column 21 to column 32)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 27, column 41 to column 51)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 27, column 2 to column 69)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 28, column 8 to column 19)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 28, column 21 to column 32)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 28, column 41 to column 51)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 28, column 2 to column 71)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 29, column 8 to column 19)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 29, column 21 to column 32)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 29, column 41 to column 51)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 29, column 2 to column 71)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 31, column 8 to column 19)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 31, column 21 to column 32)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 31, column 34 to column 44)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 31, column 2 to column 70)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 32, column 8 to column 19)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 32, column 21 to column 32)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 32, column 34 to column 44)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 32, column 2 to column 73)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 33, column 8 to column 19)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 33, column 20 to column 31)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 33, column 2 to column 48)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 34, column 8 to column 19)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 34, column 20 to column 31)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 34, column 2 to column 51)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 36, column 8 to column 19)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 36, column 21 to column 32)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 36, column 2 to column 48)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 38, column 8 to column 19)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 38, column 21 to column 32)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 38, column 41 to column 51)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 38, column 53 to column 64)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 38, column 2 to column 75)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 41, column 8 to column 19)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 41, column 21 to column 32)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 41, column 34 to column 44)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 41, column 2 to column 55)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 42, column 8 to column 19)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 42, column 20 to column 31)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 42, column 2 to column 53)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 44, column 9 to column 20)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 44, column 2 to column 25)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 45, column 9 to column 20)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 45, column 2 to column 24)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 52, column 2 to column 14)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 53, column 2 to column 13)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 55, column 2 to column 30)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 56, column 2 to column 27)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 58, column 9 to column 20)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 58, column 2 to column 39)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 59, column 2 to column 27)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 60, column 2 to column 18)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 61, column 2 to column 18)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 64, column 8 to column 19)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 64, column 21 to column 32)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 64, column 41 to column 52)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 64, column 2 to column 66)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 65, column 8 to column 19)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 65, column 21 to column 32)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 65, column 41 to column 52)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 65, column 2 to column 67)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 67, column 8 to column 19)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 67, column 2 to column 31)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 73, column 4 to column 17)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 77, column 6 to column 116)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 78, column 6 to column 47)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 75, column 27 to line 79, column 5)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 71, column 27 to line 81, column 3)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 71, column 2 to line 81, column 3)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 89, column 29 to column 40)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 90, column 18 to column 29)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 91, column 18 to column 29)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 99, column 9 to column 20)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 100, column 9 to column 20)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 3, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 4, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 5, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 2, column 61, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 13, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 19, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 11, column 58, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 27, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 29, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 25, column 56, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 37, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 39, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 35, column 78, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 48, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 46, column 73, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 57, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl.stan', line 55, column 132, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 2, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 3, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 5, column 9, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 5, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 6, column 9, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 6, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 8, column 9, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 8, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 10, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 1, column 129, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 18, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 19, column 9, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 19, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 20, column 9, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 20, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 21, column 9, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 21, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 22, column 9, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 22, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 24, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 34, column 6, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 33, column 12, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 32, column 6, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 31, column 50, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 30, column 49, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 38, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/pgstat.stan', line 16, column 176, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 3, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_interval_fold.stan', line 3, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 4, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_interval_fold.stan', line 4, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 4, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_interval_fold.stan', line 7, column 8, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 4, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_interval_fold.stan', line 7, column 28, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 4, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_interval_fold.stan', line 7, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 4, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_interval_fold.stan', line 11, column 4, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 4, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_interval_fold.stan', line 15, column 6, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 4, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_interval_fold.stan', line 29, column 6, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 4, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_interval_fold.stan', line 13, column 27, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 4, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_interval_fold.stan', line 9, column 28, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 4, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_interval_fold.stan', line 9, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 4, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_interval_fold.stan', line 40, column 2, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 4, column 0)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_interval_fold.stan', line 1, column 540, included from\n'/Users/chrobin/Documents/zusammen/zusammen/stan_models/cpl_simple_chunked.stan', line 4, column 0)"};

struct integral_flux_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__, typename T6__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_col_vector<T2__>,
                                stan::is_vt_not_complex<T2__>,
                                stan::is_col_vector<T3__>,
                                stan::is_vt_not_complex<T3__>,
                                stan::is_stan_scalar<T4__>,
                                stan::is_stan_scalar<T5__>,
                                stan::is_stan_scalar<T6__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                       stan::base_type_t<T2__>, stan::base_type_t<T3__>, T4__,
                       stan::promote_args_t<T5__, T6__>>, -1, 1>
  operator()(const T0__& ebounds_lo, const T1__& ebounds_hi,
             const T2__& ebounds_add, const T3__& ebounds_half,
             const T4__& norm, const T5__& ec, const T6__& alpha,
             std::ostream* pstream__) const;
};
struct background_model_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_col_vector<T2__>,
                                stan::is_vt_not_complex<T2__>,
                                stan::is_col_vector<T3__>,
                                stan::is_vt_not_complex<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                       stan::base_type_t<T2__>, stan::base_type_t<T3__>>, -1, 1>
  operator()(const T0__& observed_counts, const T1__& background_counts,
             const T2__& background_error, const T3__& expected_model_counts,
             std::ostream* pstream__) const;
};
struct cpl_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>, -1, 1>
  operator()(const T0__& energy, const T1__& norm, const T2__& ec,
             const T3__& alpha, std::ostream* pstream__) const;
};
struct pgstat_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_col_vector<T2__>,
                                stan::is_vt_not_complex<T2__>,
                                stan::is_col_vector<T3__>,
                                stan::is_vt_not_complex<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                       stan::base_type_t<T2__>, stan::base_type_t<T3__>>, -1, 1>
  operator()(const T0__& observed_counts, const T1__& background_counts,
             const T2__& background_error, const T3__& expected_model_counts,
             const std::vector<int>& idx_background_zero,
             const std::vector<int>& idx_background_nonzero,
             std::ostream* pstream__) const;
};
struct partial_log_like_rsfunctor__ {
  template <typename T3__, typename T4__, typename T5__, typename T6__,
            typename T7__, typename T8__, typename T11__, typename T12__,
            typename T13__, typename T14__, typename T15__, typename T16__,
            typename T25__, typename T26__,
            stan::require_all_t<stan::is_col_vector<T3__>,
                                stan::is_vt_not_complex<T3__>,
                                stan::is_col_vector<T4__>,
                                stan::is_vt_not_complex<T4__>,
                                stan::is_col_vector<T5__>,
                                stan::is_vt_not_complex<T5__>,
                                stan::is_stan_scalar<T6__>,
                                stan::is_stan_scalar<T7__>,
                                stan::is_stan_scalar<T8__>,
                                stan::is_stan_scalar<T11__>,
                                stan::is_stan_scalar<T12__>,
                                stan::is_stan_scalar<T13__>,
                                stan::is_stan_scalar<T14__>,
                                stan::is_stan_scalar<T15__>,
                                stan::is_stan_scalar<T16__>,
                                stan::is_stan_scalar<T25__>,
                                stan::is_stan_scalar<T26__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                       stan::base_type_t<T5__>, T6__, T7__,
                       stan::promote_args_t<T8__, T11__, T12__, T13__, T14__,
                                            stan::promote_args_t<T15__, T16__,
                                                                 T25__, T26__>>>
  operator()(const std::vector<int>& n_slice, const int& start, const int& end,
             std::ostream* pstream__, const T3__& alpha, const T4__& ec,
             const T5__& K,
             const std::vector<std::vector<Eigen::Matrix<T6__, -1, 1>>>& observed_counts,
             const std::vector<std::vector<Eigen::Matrix<T7__, -1, 1>>>& background_counts,
             const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& background_errors,
             const std::vector<std::vector<std::vector<int>>>& mask,
             const std::vector<std::vector<int>>& N_channels_used,
             const std::vector<std::vector<T11__>>& exposure,
             const std::vector<std::vector<Eigen::Matrix<T12__, -1, 1>>>& ebounds_lo,
             const std::vector<std::vector<Eigen::Matrix<T13__, -1, 1>>>& ebounds_hi,
             const std::vector<std::vector<Eigen::Matrix<T14__, -1, 1>>>& ebounds_add,
             const std::vector<std::vector<Eigen::Matrix<T15__, -1, 1>>>& ebounds_half,
             const std::vector<std::vector<Eigen::Matrix<T16__, -1, -1>>>& response,
             const std::vector<std::vector<std::vector<int>>>& idx_background_zero,
             const std::vector<std::vector<std::vector<int>>>& idx_background_nonzero,
             const std::vector<std::vector<int>>& N_bkg_zero,
             const std::vector<std::vector<int>>& N_bkg_nonzero,
             const std::vector<int>& N_dets,
             const std::vector<std::vector<int>>& N_chan,
             const std::vector<std::vector<int>>& N_echan,
             const int& max_n_chan, const T25__& emin, const T26__& emax) const;
};
struct ggrb_int_cpl_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__>
  operator()(const T0__& alpha, const T1__& ec, const T2__& emin,
             const T3__& emax, std::ostream* pstream__) const;
};
struct cpl_flux_integrand_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__>
  operator()(const T0__& x, const T1__& xc, const std::vector<T2__>& theta,
             const std::vector<T3__>& x_r, const std::vector<int>& x_i,
             std::ostream* pstream__) const;
};
struct differential_flux_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_col_vector<T0__>,
                                stan::is_vt_not_complex<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>, -1, 1>
  operator()(const T0__& energy, const T1__& norm, const T2__& ec,
             const T3__& alpha, std::ostream* pstream__) const;
};
struct partial_log_like_functor__ {
  template <typename T3__, typename T4__, typename T5__, typename T6__,
            typename T7__, typename T8__, typename T11__, typename T12__,
            typename T13__, typename T14__, typename T15__, typename T16__,
            typename T25__, typename T26__,
            stan::require_all_t<stan::is_col_vector<T3__>,
                                stan::is_vt_not_complex<T3__>,
                                stan::is_col_vector<T4__>,
                                stan::is_vt_not_complex<T4__>,
                                stan::is_col_vector<T5__>,
                                stan::is_vt_not_complex<T5__>,
                                stan::is_stan_scalar<T6__>,
                                stan::is_stan_scalar<T7__>,
                                stan::is_stan_scalar<T8__>,
                                stan::is_stan_scalar<T11__>,
                                stan::is_stan_scalar<T12__>,
                                stan::is_stan_scalar<T13__>,
                                stan::is_stan_scalar<T14__>,
                                stan::is_stan_scalar<T15__>,
                                stan::is_stan_scalar<T16__>,
                                stan::is_stan_scalar<T25__>,
                                stan::is_stan_scalar<T26__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                       stan::base_type_t<T5__>, T6__, T7__,
                       stan::promote_args_t<T8__, T11__, T12__, T13__, T14__,
                                            stan::promote_args_t<T15__, T16__,
                                                                 T25__, T26__>>>
  operator()(const std::vector<int>& n_slice, const int& start, const int& end,
             const T3__& alpha, const T4__& ec, const T5__& K,
             const std::vector<std::vector<Eigen::Matrix<T6__, -1, 1>>>& observed_counts,
             const std::vector<std::vector<Eigen::Matrix<T7__, -1, 1>>>& background_counts,
             const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& background_errors,
             const std::vector<std::vector<std::vector<int>>>& mask,
             const std::vector<std::vector<int>>& N_channels_used,
             const std::vector<std::vector<T11__>>& exposure,
             const std::vector<std::vector<Eigen::Matrix<T12__, -1, 1>>>& ebounds_lo,
             const std::vector<std::vector<Eigen::Matrix<T13__, -1, 1>>>& ebounds_hi,
             const std::vector<std::vector<Eigen::Matrix<T14__, -1, 1>>>& ebounds_add,
             const std::vector<std::vector<Eigen::Matrix<T15__, -1, 1>>>& ebounds_half,
             const std::vector<std::vector<Eigen::Matrix<T16__, -1, -1>>>& response,
             const std::vector<std::vector<std::vector<int>>>& idx_background_zero,
             const std::vector<std::vector<std::vector<int>>>& idx_background_nonzero,
             const std::vector<std::vector<int>>& N_bkg_zero,
             const std::vector<std::vector<int>>& N_bkg_nonzero,
             const std::vector<int>& N_dets,
             const std::vector<std::vector<int>>& N_chan,
             const std::vector<std::vector<int>>& N_echan,
             const int& max_n_chan, const T25__& emin, const T26__& emax,
             std::ostream* pstream__) const;
};
struct cpl_indi_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_stan_scalar<T1__>,
                                stan::is_stan_scalar<T2__>,
                                stan::is_stan_scalar<T3__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__>
  operator()(const T0__& energy, const T1__& K, const T2__& alpha,
             const T3__& ec, std::ostream* pstream__) const;
};

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__>
  ggrb_int_cpl(const T0__& alpha, const T1__& ec, const T2__& emin,
               const T3__& emax, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ lcm_sym99__;
      local_scalar_t__ lcm_sym98__;
      double lcm_sym97__;
      {
        double i1 = std::numeric_limits<double>::quiet_NaN();
        lcm_sym99__ = (stan::math::gamma_q((2 + alpha), (emin / ec)) *
                        stan::math::tgamma((2 + alpha)));
        double i2 = std::numeric_limits<double>::quiet_NaN();
        lcm_sym98__ = (stan::math::gamma_q((2 + alpha), (emax / ec)) *
                        stan::math::tgamma((2 + alpha)));
        current_statement__ = 109;
        return (-stan::math::square(ec) * (lcm_sym98__ - lcm_sym99__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>, -1, 1>
  cpl(const T0__& energy_arg__, const T1__& norm, const T2__& ec,
      const T3__& alpha, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    const auto& energy = stan::math::to_ref(energy_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      Eigen::Matrix<double, -1, 1> lcm_sym100__;
      {
        double piv = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 112;
        return stan::math::elt_multiply(
                 stan::math::multiply(norm,
                   stan::math::pow(stan::math::divide(energy, 100.), alpha)),
                 stan::math::exp(
                   stan::math::divide(stan::math::minus(energy), ec)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__>
  cpl_indi(const T0__& energy, const T1__& K, const T2__& alpha,
           const T3__& ec, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      double lcm_sym101__;
      {
        double piv = std::numeric_limits<double>::quiet_NaN();
        current_statement__ = 115;
        return ((K * stan::math::pow((energy / 100.), alpha)) *
                 stan::math::exp((-energy / ec)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  stan::promote_args_t<T0__, T1__, T2__, T3__>
  cpl_flux_integrand(const T0__& x, const T1__& xc,
                     const std::vector<T2__>& theta,
                     const std::vector<T3__>& x_r,
                     const std::vector<int>& x_i, std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ lcm_sym102__;
      {
        double out = std::numeric_limits<double>::quiet_NaN();
        lcm_sym102__ = (x *
                         cpl_indi(x,
                           stan::model::rvalue(theta, "theta",
                             stan::model::index_uni(1)),
                           stan::model::rvalue(theta, "theta",
                             stan::model::index_uni(2)),
                           stan::model::rvalue(theta, "theta",
                             stan::model::index_uni(3)), pstream__));
        current_statement__ = 118;
        return lcm_sym102__;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>, -1, 1>
  differential_flux(const T0__& energy_arg__, const T1__& norm,
                    const T2__& ec, const T3__& alpha,
                    std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>;
    int current_statement__ = 0; 
    const auto& energy = stan::math::to_ref(energy_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      Eigen::Matrix<double, -1, 1> lcm_sym103__;
      {
        current_statement__ = 120;
        return cpl(energy, norm, ec, alpha, pstream__);
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>, stan::base_type_t<T3__>, T4__,
                     stan::promote_args_t<T5__, T6__>>, -1, 1>
  integral_flux(const T0__& ebounds_lo_arg__, const T1__& ebounds_hi_arg__,
                const T2__& ebounds_add_arg__,
                const T3__& ebounds_half_arg__, const T4__& norm,
                const T5__& ec, const T6__& alpha, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>,
                                 stan::base_type_t<T1__>,
                                 stan::base_type_t<T2__>,
                                 stan::base_type_t<T3__>, T4__,
                                 stan::promote_args_t<T5__, T6__>>;
    int current_statement__ = 0; 
    const auto& ebounds_lo = stan::math::to_ref(ebounds_lo_arg__);
    const auto& ebounds_hi = stan::math::to_ref(ebounds_hi_arg__);
    const auto& ebounds_add = stan::math::to_ref(ebounds_add_arg__);
    const auto& ebounds_half = stan::math::to_ref(ebounds_half_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      Eigen::Matrix<double, -1, 1> lcm_sym104__;
      {
        current_statement__ = 122;
        return stan::math::elt_multiply(ebounds_add,
                 stan::math::add(
                   stan::math::fma(4,
                     differential_flux(ebounds_half, norm, ec,
                       alpha, pstream__),
                     differential_flux(ebounds_lo, norm, ec,
                       alpha, pstream__)),
                   differential_flux(ebounds_hi, norm, ec, alpha, pstream__)));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>, stan::base_type_t<T3__>>, -1, 1>
  background_model(const T0__& observed_counts_arg__,
                   const T1__& background_counts_arg__,
                   const T2__& background_error_arg__,
                   const T3__& expected_model_counts_arg__,
                   std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>,
                                 stan::base_type_t<T1__>,
                                 stan::base_type_t<T2__>,
                                 stan::base_type_t<T3__>>;
    int current_statement__ = 0; 
    const auto& observed_counts = stan::math::to_ref(observed_counts_arg__);
    const auto& background_counts = stan::math::to_ref(background_counts_arg__);
    const auto& background_error = stan::math::to_ref(background_error_arg__);
    const auto& expected_model_counts = stan::math::to_ref(expected_model_counts_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> lcm_sym108__;
      int lcm_sym107__;
      Eigen::Matrix<local_scalar_t__, -1, 1> lcm_sym106__;
      Eigen::Matrix<local_scalar_t__, -1, 1> lcm_sym105__;
      {
        int N = std::numeric_limits<int>::min();
        lcm_sym107__ = stan::math::num_elements(expected_model_counts);
        current_statement__ = 125;
        stan::math::validate_non_negative_index("MB", "N", lcm_sym107__);
        Eigen::Matrix<double, -1, 1> MB =
           Eigen::Matrix<double, -1, 1>::Constant(lcm_sym107__,
             std::numeric_limits<double>::quiet_NaN());
        stan::model::assign(lcm_sym105__,
          stan::math::add(background_counts, expected_model_counts),
          "assigning variable lcm_sym105__");
        current_statement__ = 127;
        stan::math::validate_non_negative_index("s2", "N", lcm_sym107__);
        Eigen::Matrix<double, -1, 1> s2 =
           Eigen::Matrix<double, -1, 1>::Constant(lcm_sym107__,
             std::numeric_limits<double>::quiet_NaN());
        stan::model::assign(lcm_sym108__,
          stan::math::square(background_error),
          "assigning variable lcm_sym108__");
        current_statement__ = 129;
        stan::math::validate_non_negative_index("b", "N", lcm_sym107__);
        Eigen::Matrix<double, -1, 1> b =
           Eigen::Matrix<double, -1, 1>::Constant(
             stan::math::num_elements(expected_model_counts),
             std::numeric_limits<double>::quiet_NaN());
        stan::model::assign(lcm_sym106__,
          stan::math::multiply(0.5,
            stan::math::subtract(
              stan::math::subtract(
                stan::math::add(
                  stan::math::sqrt(
                    stan::math::add(
                      stan::math::subtract(stan::math::square(lcm_sym105__),
                        stan::math::elt_multiply(
                          stan::math::multiply(2, lcm_sym108__),
                          stan::math::subtract(lcm_sym105__,
                            stan::math::multiply(2, observed_counts)))),
                      stan::math::square(lcm_sym108__))), background_counts),
                expected_model_counts), lcm_sym108__)),
          "assigning variable lcm_sym106__");
        current_statement__ = 131;
        return lcm_sym106__;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>, stan::base_type_t<T3__>>, -1, 1>
  pgstat(const T0__& observed_counts_arg__,
         const T1__& background_counts_arg__,
         const T2__& background_error_arg__,
         const T3__& expected_model_counts_arg__,
         const std::vector<int>& idx_background_zero,
         const std::vector<int>& idx_background_nonzero,
         std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T0__>,
                                 stan::base_type_t<T1__>,
                                 stan::base_type_t<T2__>,
                                 stan::base_type_t<T3__>>;
    int current_statement__ = 0; 
    const auto& observed_counts = stan::math::to_ref(observed_counts_arg__);
    const auto& background_counts = stan::math::to_ref(background_counts_arg__);
    const auto& background_error = stan::math::to_ref(background_error_arg__);
    const auto& expected_model_counts = stan::math::to_ref(expected_model_counts_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int lcm_sym123__;
      int lcm_sym122__;
      Eigen::Matrix<local_scalar_t__, -1, 1> lcm_sym121__;
      Eigen::Matrix<local_scalar_t__, -1, 1> lcm_sym120__;
      int lcm_sym119__;
      int lcm_sym118__;
      Eigen::Matrix<local_scalar_t__, -1, 1> lcm_sym117__;
      double lcm_sym116__;
      double lcm_sym115__;
      double lcm_sym114__;
      double lcm_sym113__;
      Eigen::Matrix<double, -1, 1> lcm_sym112__;
      int lcm_sym111__;
      int lcm_sym110__;
      int lcm_sym109__;
      {
        int N = std::numeric_limits<int>::min();
        lcm_sym118__ = stan::math::num_elements(expected_model_counts);
        current_statement__ = 134;
        stan::math::validate_non_negative_index("log_likes", "N",
                                                lcm_sym118__);
        Eigen::Matrix<local_scalar_t__, -1, 1> log_likes =
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(lcm_sym118__,
             DUMMY_VAR__);
        current_statement__ = 136;
        stan::math::validate_non_negative_index("s2", "N", lcm_sym118__);
        Eigen::Matrix<double, -1, 1> s2 =
           Eigen::Matrix<double, -1, 1>::Constant(lcm_sym118__,
             std::numeric_limits<double>::quiet_NaN());
        stan::model::assign(lcm_sym120__,
          stan::math::square(background_error),
          "assigning variable lcm_sym120__");
        current_statement__ = 138;
        stan::math::validate_non_negative_index("b", "N", lcm_sym118__);
        Eigen::Matrix<double, -1, 1> b =
           Eigen::Matrix<double, -1, 1>::Constant(lcm_sym118__,
             std::numeric_limits<double>::quiet_NaN());
        stan::model::assign(lcm_sym121__,
          background_model(observed_counts, background_counts,
            background_error, expected_model_counts, pstream__),
          "assigning variable lcm_sym121__");
        current_statement__ = 140;
        stan::math::validate_non_negative_index("factorial_term", "N",
                                                lcm_sym118__);
        Eigen::Matrix<double, -1, 1> factorial_term =
           Eigen::Matrix<double, -1, 1>::Constant(
             stan::math::num_elements(expected_model_counts),
             std::numeric_limits<double>::quiet_NaN());
        stan::model::assign(lcm_sym117__,
          stan::math::add(expected_model_counts,
            stan::math::lgamma(stan::math::add(observed_counts, 1))),
          "assigning variable lcm_sym117__");
        current_statement__ = 142;
        stan::model::assign(log_likes,
          stan::math::subtract(
            stan::math::subtract(
              stan::math::subtract(
                stan::math::subtract(
                  stan::math::fma(
                    stan::model::rvalue(observed_counts, "observed_counts",
                      stan::model::index_multi(idx_background_nonzero)),
                    stan::math::log(
                      stan::math::add(
                        stan::model::rvalue(lcm_sym121__, "lcm_sym121__",
                          stan::model::index_multi(idx_background_nonzero)),
                        stan::model::rvalue(expected_model_counts,
                          "expected_model_counts",
                          stan::model::index_multi(idx_background_nonzero)))),
                    stan::math::elt_divide(
                      stan::math::minus(
                        stan::math::square(
                          stan::math::subtract(
                            stan::model::rvalue(lcm_sym121__, "lcm_sym121__",
                              stan::model::index_multi(idx_background_nonzero)),
                            stan::model::rvalue(background_counts,
                              "background_counts",
                              stan::model::index_multi(idx_background_nonzero))))),
                      stan::math::multiply(2,
                        stan::model::rvalue(lcm_sym120__, "lcm_sym120__",
                          stan::model::index_multi(idx_background_nonzero))))),
                  stan::model::rvalue(lcm_sym121__, "lcm_sym121__",
                    stan::model::index_multi(idx_background_nonzero))),
                stan::model::rvalue(lcm_sym117__, "lcm_sym117__",
                  stan::model::index_multi(idx_background_nonzero))),
              stan::math::multiply_log(0.5, (2 * stan::math::pi()))),
            stan::math::log(
              stan::model::rvalue(background_error, "background_error",
                stan::model::index_multi(idx_background_nonzero)))),
          "assigning variable log_likes", stan::model::index_multi(idx_background_nonzero));
        lcm_sym119__ = stan::math::num_elements(idx_background_zero);
        if (stan::math::logical_gte(lcm_sym119__, 1)) {
          lcm_sym123__ = stan::model::rvalue(idx_background_zero,
                           "idx_background_zero", stan::model::index_uni(1));
          if (stan::math::logical_gt(observed_counts[(lcm_sym123__ - 1)], 0)) {
            current_statement__ = 145;
            stan::model::assign(log_likes,
              (stan::math::multiply_log(observed_counts[(lcm_sym123__ - 1)],
                 expected_model_counts[(lcm_sym123__ - 1)]) -
                lcm_sym117__[(lcm_sym123__ - 1)]),
              "assigning variable log_likes", stan::model::index_uni(lcm_sym123__));
          } else {
            current_statement__ = 143;
            stan::model::assign(log_likes, -lcm_sym117__[(lcm_sym123__ - 1)],
              "assigning variable log_likes", stan::model::index_uni(lcm_sym123__));
          }
          for (int n = 2; n <= lcm_sym119__; ++n) {
            lcm_sym122__ = stan::model::rvalue(idx_background_zero,
                             "idx_background_zero",
                             stan::model::index_uni(n));
            if (stan::math::logical_gt(observed_counts[(lcm_sym122__ - 1)],
                  0)) {
              current_statement__ = 145;
              stan::model::assign(log_likes,
                (stan::math::multiply_log(
                   observed_counts[(lcm_sym122__ - 1)],
                   expected_model_counts[(lcm_sym122__ - 1)]) -
                  lcm_sym117__[(lcm_sym122__ - 1)]),
                "assigning variable log_likes", stan::model::index_uni(lcm_sym122__));
            } else {
              current_statement__ = 143;
              stan::model::assign(log_likes,
                -lcm_sym117__[(lcm_sym122__ - 1)],
                "assigning variable log_likes", stan::model::index_uni(lcm_sym122__));
            }
          }
        } 
        current_statement__ = 148;
        return log_likes;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T8__, typename T11__, typename T12__,
          typename T13__, typename T14__, typename T15__, typename T16__,
          typename T25__, typename T26__,
          stan::require_all_t<stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>,
                              stan::is_stan_scalar<T8__>,
                              stan::is_stan_scalar<T11__>,
                              stan::is_stan_scalar<T12__>,
                              stan::is_stan_scalar<T13__>,
                              stan::is_stan_scalar<T14__>,
                              stan::is_stan_scalar<T15__>,
                              stan::is_stan_scalar<T16__>,
                              stan::is_stan_scalar<T25__>,
                              stan::is_stan_scalar<T26__>>* = nullptr>
  stan::promote_args_t<stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                     stan::base_type_t<T5__>, T6__, T7__,
                     stan::promote_args_t<T8__, T11__, T12__, T13__, T14__,
                                          stan::promote_args_t<T15__, T16__,
                                                               T25__, T26__>>>
  partial_log_like(const std::vector<int>& n_slice, const int& start,
                   const int& end, const T3__& alpha_arg__,
                   const T4__& ec_arg__, const T5__& K_arg__,
                   const std::vector<std::vector<Eigen::Matrix<T6__, -1, 1>>>& observed_counts,
                   const std::vector<std::vector<Eigen::Matrix<T7__, -1, 1>>>& background_counts,
                   const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& background_errors,
                   const std::vector<std::vector<std::vector<int>>>& mask,
                   const std::vector<std::vector<int>>& N_channels_used,
                   const std::vector<std::vector<T11__>>& exposure,
                   const std::vector<std::vector<Eigen::Matrix<T12__, -1, 1>>>& ebounds_lo,
                   const std::vector<std::vector<Eigen::Matrix<T13__, -1, 1>>>& ebounds_hi,
                   const std::vector<std::vector<Eigen::Matrix<T14__, -1, 1>>>& ebounds_add,
                   const std::vector<std::vector<Eigen::Matrix<T15__, -1, 1>>>& ebounds_half,
                   const std::vector<std::vector<Eigen::Matrix<T16__, -1, -1>>>& response,
                   const std::vector<std::vector<std::vector<int>>>& idx_background_zero,
                   const std::vector<std::vector<std::vector<int>>>& idx_background_nonzero,
                   const std::vector<std::vector<int>>& N_bkg_zero,
                   const std::vector<std::vector<int>>& N_bkg_nonzero,
                   const std::vector<int>& N_dets,
                   const std::vector<std::vector<int>>& N_chan,
                   const std::vector<std::vector<int>>& N_echan,
                   const int& max_n_chan, const T25__& emin,
                   const T26__& emax, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::base_type_t<T3__>,
                                 stan::base_type_t<T4__>,
                                 stan::base_type_t<T5__>, T6__, T7__,
                                 stan::promote_args_t<T8__, T11__, T12__,
                                                      T13__, T14__,
                                                      stan::promote_args_t<
                                                      T15__, T16__, T25__,
                                                      T26__>>>;
    int current_statement__ = 0; 
    const auto& alpha = stan::math::to_ref(alpha_arg__);
    const auto& ec = stan::math::to_ref(ec_arg__);
    const auto& K = stan::math::to_ref(K_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      double lcm_sym145__;
      int lcm_sym144__;
      int lcm_sym143__;
      int lcm_sym142__;
      int lcm_sym141__;
      int lcm_sym140__;
      int lcm_sym139__;
      int lcm_sym138__;
      int lcm_sym137__;
      int lcm_sym136__;
      int lcm_sym135__;
      Eigen::Matrix<double, -1, 1> lcm_sym134__;
      Eigen::Matrix<double, -1, 1> lcm_sym133__;
      Eigen::Matrix<double, -1, 1> lcm_sym132__;
      Eigen::Matrix<double, -1, 1> lcm_sym131__;
      double lcm_sym130__;
      double lcm_sym129__;
      double lcm_sym128__;
      double lcm_sym127__;
      int lcm_sym126__;
      int lcm_sym125__;
      int lcm_sym124__;
      {
        local_scalar_t__ log_like;
        log_like = 0;
        int slice_length = std::numeric_limits<int>::min();
        lcm_sym136__ = stan::math::num_elements(n_slice);
        current_statement__ = 152;
        stan::math::validate_non_negative_index("expected_model_counts",
                                                "max(N_dets)",
                                                stan::math::max(N_dets));
        current_statement__ = 153;
        stan::math::validate_non_negative_index("expected_model_counts",
                                                "max_n_chan", max_n_chan);
        std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> expected_model_counts =
           std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(
             stan::math::max(N_dets), 
             Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(max_n_chan,
               DUMMY_VAR__));
        current_statement__ = 160;
        if (stan::math::logical_gte(lcm_sym136__, 1)) {
          int n = std::numeric_limits<int>::min();
          lcm_sym144__ = stan::model::rvalue(n_slice, "n_slice",
                           stan::model::index_uni(1));
          lcm_sym142__ = N_dets[(lcm_sym144__ - 1)];
          if (stan::math::logical_gte(lcm_sym142__, 1)) {
            current_statement__ = 156;
            stan::model::assign(expected_model_counts,
              stan::math::multiply(
                stan::math::multiply(
                  stan::model::rvalue(response, "response",
                    stan::model::index_uni(lcm_sym144__),
                      stan::model::index_uni(1),
                      stan::model::index_min_max(1, stan::model::rvalue(
                                                      N_chan, "N_chan",
                                                      stan::model::index_uni(lcm_sym144__),
                                                        stan::model::index_uni(1))),
                      stan::model::index_min_max(1, stan::model::rvalue(
                                                      N_echan, "N_echan",
                                                      stan::model::index_uni(lcm_sym144__),
                                                        stan::model::index_uni(1)))),
                  integral_flux(
                    stan::model::rvalue(ebounds_lo, "ebounds_lo",
                      stan::model::index_uni(lcm_sym144__),
                        stan::model::index_uni(1),
                        stan::model::index_min_max(1, stan::model::rvalue(
                                                        N_echan, "N_echan",
                                                        stan::model::index_uni(lcm_sym144__),
                                                          stan::model::index_uni(1)))),
                    stan::model::rvalue(ebounds_hi, "ebounds_hi",
                      stan::model::index_uni(lcm_sym144__),
                        stan::model::index_uni(1),
                        stan::model::index_min_max(1, stan::model::rvalue(
                                                        N_echan, "N_echan",
                                                        stan::model::index_uni(lcm_sym144__),
                                                          stan::model::index_uni(1)))),
                    stan::model::rvalue(ebounds_add, "ebounds_add",
                      stan::model::index_uni(lcm_sym144__),
                        stan::model::index_uni(1),
                        stan::model::index_min_max(1, stan::model::rvalue(
                                                        N_echan, "N_echan",
                                                        stan::model::index_uni(lcm_sym144__),
                                                          stan::model::index_uni(1)))),
                    stan::model::rvalue(ebounds_half, "ebounds_half",
                      stan::model::index_uni(lcm_sym144__),
                        stan::model::index_uni(1),
                        stan::model::index_min_max(1, stan::model::rvalue(
                                                        N_echan, "N_echan",
                                                        stan::model::index_uni(lcm_sym144__),
                                                          stan::model::index_uni(1)))),
                    K[(lcm_sym144__ - 1)], ec[(lcm_sym144__ - 1)],
                    alpha[(lcm_sym144__ - 1)], pstream__)),
                stan::model::rvalue(exposure, "exposure",
                  stan::model::index_uni(lcm_sym144__),
                    stan::model::index_uni(1))),
              "assigning variable expected_model_counts", stan::model::index_uni(1),
                                                            stan::model::index_min_max(1, 
                                                            stan::model::rvalue(
                                                              N_chan,
                                                              "N_chan",
                                                              stan::model::index_uni(lcm_sym144__),
                                                                stan::model::index_uni(1))));
            current_statement__ = 157;
            log_like = (0 +
                         stan::math::sum(
                           pgstat(
                             stan::model::rvalue(observed_counts,
                               "observed_counts",
                               stan::model::index_uni(lcm_sym144__),
                                 stan::model::index_uni(1),
                                 stan::model::index_multi(stan::model::rvalue(
                                                            mask, "mask",
                                                            stan::model::index_uni(lcm_sym144__),
                                                              stan::model::index_uni(1),
                                                              stan::model::index_min_max(1, 
                                                              stan::model::rvalue(
                                                                N_channels_used,
                                                                "N_channels_used",
                                                                stan::model::index_uni(lcm_sym144__),
                                                                  stan::model::index_uni(1)))))),
                             stan::model::rvalue(background_counts,
                               "background_counts",
                               stan::model::index_uni(lcm_sym144__),
                                 stan::model::index_uni(1),
                                 stan::model::index_multi(stan::model::rvalue(
                                                            mask, "mask",
                                                            stan::model::index_uni(lcm_sym144__),
                                                              stan::model::index_uni(1),
                                                              stan::model::index_min_max(1, 
                                                              stan::model::rvalue(
                                                                N_channels_used,
                                                                "N_channels_used",
                                                                stan::model::index_uni(lcm_sym144__),
                                                                  stan::model::index_uni(1)))))),
                             stan::model::rvalue(background_errors,
                               "background_errors",
                               stan::model::index_uni(lcm_sym144__),
                                 stan::model::index_uni(1),
                                 stan::model::index_multi(stan::model::rvalue(
                                                            mask, "mask",
                                                            stan::model::index_uni(lcm_sym144__),
                                                              stan::model::index_uni(1),
                                                              stan::model::index_min_max(1, 
                                                              stan::model::rvalue(
                                                                N_channels_used,
                                                                "N_channels_used",
                                                                stan::model::index_uni(lcm_sym144__),
                                                                  stan::model::index_uni(1)))))),
                             stan::model::rvalue(expected_model_counts,
                               "expected_model_counts",
                               stan::model::index_uni(1),
                                 stan::model::index_multi(stan::model::rvalue(
                                                            mask, "mask",
                                                            stan::model::index_uni(lcm_sym144__),
                                                              stan::model::index_uni(1),
                                                              stan::model::index_min_max(1, 
                                                              stan::model::rvalue(
                                                                N_channels_used,
                                                                "N_channels_used",
                                                                stan::model::index_uni(lcm_sym144__),
                                                                  stan::model::index_uni(1)))))),
                             stan::model::rvalue(idx_background_zero,
                               "idx_background_zero",
                               stan::model::index_uni(lcm_sym144__),
                                 stan::model::index_uni(1),
                                 stan::model::index_min_max(1, stan::model::rvalue(
                                                                 N_bkg_zero,
                                                                 "N_bkg_zero",
                                                                 stan::model::index_uni(lcm_sym144__),
                                                                   stan::model::index_uni(1)))),
                             stan::model::rvalue(idx_background_nonzero,
                               "idx_background_nonzero",
                               stan::model::index_uni(lcm_sym144__),
                                 stan::model::index_uni(1),
                                 stan::model::index_min_max(1, stan::model::rvalue(
                                                                 N_bkg_nonzero,
                                                                 "N_bkg_nonzero",
                                                                 stan::model::index_uni(lcm_sym144__),
                                                                   stan::model::index_uni(1)))), pstream__)));
            for (int m = 2; m <= lcm_sym142__; ++m) {
              current_statement__ = 156;
              stan::model::assign(expected_model_counts,
                stan::math::multiply(
                  stan::math::multiply(
                    stan::model::rvalue(response, "response",
                      stan::model::index_uni(lcm_sym144__),
                        stan::model::index_uni(m),
                        stan::model::index_min_max(1, stan::model::rvalue(
                                                        N_chan, "N_chan",
                                                        stan::model::index_uni(lcm_sym144__),
                                                          stan::model::index_uni(m))),
                        stan::model::index_min_max(1, stan::model::rvalue(
                                                        N_echan, "N_echan",
                                                        stan::model::index_uni(lcm_sym144__),
                                                          stan::model::index_uni(m)))),
                    integral_flux(
                      stan::model::rvalue(ebounds_lo, "ebounds_lo",
                        stan::model::index_uni(lcm_sym144__),
                          stan::model::index_uni(m),
                          stan::model::index_min_max(1, stan::model::rvalue(
                                                          N_echan, "N_echan",
                                                          stan::model::index_uni(lcm_sym144__),
                                                            stan::model::index_uni(m)))),
                      stan::model::rvalue(ebounds_hi, "ebounds_hi",
                        stan::model::index_uni(lcm_sym144__),
                          stan::model::index_uni(m),
                          stan::model::index_min_max(1, stan::model::rvalue(
                                                          N_echan, "N_echan",
                                                          stan::model::index_uni(lcm_sym144__),
                                                            stan::model::index_uni(m)))),
                      stan::model::rvalue(ebounds_add, "ebounds_add",
                        stan::model::index_uni(lcm_sym144__),
                          stan::model::index_uni(m),
                          stan::model::index_min_max(1, stan::model::rvalue(
                                                          N_echan, "N_echan",
                                                          stan::model::index_uni(lcm_sym144__),
                                                            stan::model::index_uni(m)))),
                      stan::model::rvalue(ebounds_half, "ebounds_half",
                        stan::model::index_uni(lcm_sym144__),
                          stan::model::index_uni(m),
                          stan::model::index_min_max(1, stan::model::rvalue(
                                                          N_echan, "N_echan",
                                                          stan::model::index_uni(lcm_sym144__),
                                                            stan::model::index_uni(m)))),
                      K[(lcm_sym144__ - 1)], ec[(lcm_sym144__ - 1)],
                      alpha[(lcm_sym144__ - 1)], pstream__)),
                  stan::model::rvalue(exposure, "exposure",
                    stan::model::index_uni(lcm_sym144__),
                      stan::model::index_uni(m))),
                "assigning variable expected_model_counts", stan::model::index_uni(m),
                                                              stan::model::index_min_max(1, 
                                                              stan::model::rvalue(
                                                                N_chan,
                                                                "N_chan",
                                                                stan::model::index_uni(lcm_sym144__),
                                                                  stan::model::index_uni(m))));
              current_statement__ = 157;
              log_like = (log_like +
                           stan::math::sum(
                             pgstat(
                               stan::model::rvalue(observed_counts,
                                 "observed_counts",
                                 stan::model::index_uni(lcm_sym144__),
                                   stan::model::index_uni(m),
                                   stan::model::index_multi(stan::model::rvalue(
                                                              mask, "mask",
                                                              stan::model::index_uni(lcm_sym144__),
                                                                stan::model::index_uni(m),
                                                                stan::model::index_min_max(1, 
                                                                stan::model::rvalue(
                                                                  N_channels_used,
                                                                  "N_channels_used",
                                                                  stan::model::index_uni(lcm_sym144__),
                                                                    stan::model::index_uni(m)))))),
                               stan::model::rvalue(background_counts,
                                 "background_counts",
                                 stan::model::index_uni(lcm_sym144__),
                                   stan::model::index_uni(m),
                                   stan::model::index_multi(stan::model::rvalue(
                                                              mask, "mask",
                                                              stan::model::index_uni(lcm_sym144__),
                                                                stan::model::index_uni(m),
                                                                stan::model::index_min_max(1, 
                                                                stan::model::rvalue(
                                                                  N_channels_used,
                                                                  "N_channels_used",
                                                                  stan::model::index_uni(lcm_sym144__),
                                                                    stan::model::index_uni(m)))))),
                               stan::model::rvalue(background_errors,
                                 "background_errors",
                                 stan::model::index_uni(lcm_sym144__),
                                   stan::model::index_uni(m),
                                   stan::model::index_multi(stan::model::rvalue(
                                                              mask, "mask",
                                                              stan::model::index_uni(lcm_sym144__),
                                                                stan::model::index_uni(m),
                                                                stan::model::index_min_max(1, 
                                                                stan::model::rvalue(
                                                                  N_channels_used,
                                                                  "N_channels_used",
                                                                  stan::model::index_uni(lcm_sym144__),
                                                                    stan::model::index_uni(m)))))),
                               stan::model::rvalue(expected_model_counts,
                                 "expected_model_counts",
                                 stan::model::index_uni(m),
                                   stan::model::index_multi(stan::model::rvalue(
                                                              mask, "mask",
                                                              stan::model::index_uni(lcm_sym144__),
                                                                stan::model::index_uni(m),
                                                                stan::model::index_min_max(1, 
                                                                stan::model::rvalue(
                                                                  N_channels_used,
                                                                  "N_channels_used",
                                                                  stan::model::index_uni(lcm_sym144__),
                                                                    stan::model::index_uni(m)))))),
                               stan::model::rvalue(idx_background_zero,
                                 "idx_background_zero",
                                 stan::model::index_uni(lcm_sym144__),
                                   stan::model::index_uni(m),
                                   stan::model::index_min_max(1, stan::model::rvalue(
                                                                   N_bkg_zero,
                                                                   "N_bkg_zero",
                                                                   stan::model::index_uni(lcm_sym144__),
                                                                    stan::model::index_uni(m)))),
                               stan::model::rvalue(idx_background_nonzero,
                                 "idx_background_nonzero",
                                 stan::model::index_uni(lcm_sym144__),
                                   stan::model::index_uni(m),
                                   stan::model::index_min_max(1, stan::model::rvalue(
                                                                   N_bkg_nonzero,
                                                                   "N_bkg_nonzero",
                                                                   stan::model::index_uni(lcm_sym144__),
                                                                    stan::model::index_uni(m)))), pstream__)));
            }
          } 
          for (int i = 2; i <= lcm_sym136__; ++i) {
            int n = std::numeric_limits<int>::min();
            lcm_sym143__ = stan::model::rvalue(n_slice, "n_slice",
                             stan::model::index_uni(i));
            lcm_sym141__ = N_dets[(lcm_sym143__ - 1)];
            if (stan::math::logical_gte(lcm_sym141__, 1)) {
              current_statement__ = 156;
              stan::model::assign(expected_model_counts,
                stan::math::multiply(
                  stan::math::multiply(
                    stan::model::rvalue(response, "response",
                      stan::model::index_uni(lcm_sym143__),
                        stan::model::index_uni(1),
                        stan::model::index_min_max(1, stan::model::rvalue(
                                                        N_chan, "N_chan",
                                                        stan::model::index_uni(lcm_sym143__),
                                                          stan::model::index_uni(1))),
                        stan::model::index_min_max(1, stan::model::rvalue(
                                                        N_echan, "N_echan",
                                                        stan::model::index_uni(lcm_sym143__),
                                                          stan::model::index_uni(1)))),
                    integral_flux(
                      stan::model::rvalue(ebounds_lo, "ebounds_lo",
                        stan::model::index_uni(lcm_sym143__),
                          stan::model::index_uni(1),
                          stan::model::index_min_max(1, stan::model::rvalue(
                                                          N_echan, "N_echan",
                                                          stan::model::index_uni(lcm_sym143__),
                                                            stan::model::index_uni(1)))),
                      stan::model::rvalue(ebounds_hi, "ebounds_hi",
                        stan::model::index_uni(lcm_sym143__),
                          stan::model::index_uni(1),
                          stan::model::index_min_max(1, stan::model::rvalue(
                                                          N_echan, "N_echan",
                                                          stan::model::index_uni(lcm_sym143__),
                                                            stan::model::index_uni(1)))),
                      stan::model::rvalue(ebounds_add, "ebounds_add",
                        stan::model::index_uni(lcm_sym143__),
                          stan::model::index_uni(1),
                          stan::model::index_min_max(1, stan::model::rvalue(
                                                          N_echan, "N_echan",
                                                          stan::model::index_uni(lcm_sym143__),
                                                            stan::model::index_uni(1)))),
                      stan::model::rvalue(ebounds_half, "ebounds_half",
                        stan::model::index_uni(lcm_sym143__),
                          stan::model::index_uni(1),
                          stan::model::index_min_max(1, stan::model::rvalue(
                                                          N_echan, "N_echan",
                                                          stan::model::index_uni(lcm_sym143__),
                                                            stan::model::index_uni(1)))),
                      K[(lcm_sym143__ - 1)], ec[(lcm_sym143__ - 1)],
                      alpha[(lcm_sym143__ - 1)], pstream__)),
                  stan::model::rvalue(exposure, "exposure",
                    stan::model::index_uni(lcm_sym143__),
                      stan::model::index_uni(1))),
                "assigning variable expected_model_counts", stan::model::index_uni(1),
                                                              stan::model::index_min_max(1, 
                                                              stan::model::rvalue(
                                                                N_chan,
                                                                "N_chan",
                                                                stan::model::index_uni(lcm_sym143__),
                                                                  stan::model::index_uni(1))));
              current_statement__ = 157;
              log_like = (log_like +
                           stan::math::sum(
                             pgstat(
                               stan::model::rvalue(observed_counts,
                                 "observed_counts",
                                 stan::model::index_uni(lcm_sym143__),
                                   stan::model::index_uni(1),
                                   stan::model::index_multi(stan::model::rvalue(
                                                              mask, "mask",
                                                              stan::model::index_uni(lcm_sym143__),
                                                                stan::model::index_uni(1),
                                                                stan::model::index_min_max(1, 
                                                                stan::model::rvalue(
                                                                  N_channels_used,
                                                                  "N_channels_used",
                                                                  stan::model::index_uni(lcm_sym143__),
                                                                    stan::model::index_uni(1)))))),
                               stan::model::rvalue(background_counts,
                                 "background_counts",
                                 stan::model::index_uni(lcm_sym143__),
                                   stan::model::index_uni(1),
                                   stan::model::index_multi(stan::model::rvalue(
                                                              mask, "mask",
                                                              stan::model::index_uni(lcm_sym143__),
                                                                stan::model::index_uni(1),
                                                                stan::model::index_min_max(1, 
                                                                stan::model::rvalue(
                                                                  N_channels_used,
                                                                  "N_channels_used",
                                                                  stan::model::index_uni(lcm_sym143__),
                                                                    stan::model::index_uni(1)))))),
                               stan::model::rvalue(background_errors,
                                 "background_errors",
                                 stan::model::index_uni(lcm_sym143__),
                                   stan::model::index_uni(1),
                                   stan::model::index_multi(stan::model::rvalue(
                                                              mask, "mask",
                                                              stan::model::index_uni(lcm_sym143__),
                                                                stan::model::index_uni(1),
                                                                stan::model::index_min_max(1, 
                                                                stan::model::rvalue(
                                                                  N_channels_used,
                                                                  "N_channels_used",
                                                                  stan::model::index_uni(lcm_sym143__),
                                                                    stan::model::index_uni(1)))))),
                               stan::model::rvalue(expected_model_counts,
                                 "expected_model_counts",
                                 stan::model::index_uni(1),
                                   stan::model::index_multi(stan::model::rvalue(
                                                              mask, "mask",
                                                              stan::model::index_uni(lcm_sym143__),
                                                                stan::model::index_uni(1),
                                                                stan::model::index_min_max(1, 
                                                                stan::model::rvalue(
                                                                  N_channels_used,
                                                                  "N_channels_used",
                                                                  stan::model::index_uni(lcm_sym143__),
                                                                    stan::model::index_uni(1)))))),
                               stan::model::rvalue(idx_background_zero,
                                 "idx_background_zero",
                                 stan::model::index_uni(lcm_sym143__),
                                   stan::model::index_uni(1),
                                   stan::model::index_min_max(1, stan::model::rvalue(
                                                                   N_bkg_zero,
                                                                   "N_bkg_zero",
                                                                   stan::model::index_uni(lcm_sym143__),
                                                                    stan::model::index_uni(1)))),
                               stan::model::rvalue(idx_background_nonzero,
                                 "idx_background_nonzero",
                                 stan::model::index_uni(lcm_sym143__),
                                   stan::model::index_uni(1),
                                   stan::model::index_min_max(1, stan::model::rvalue(
                                                                   N_bkg_nonzero,
                                                                   "N_bkg_nonzero",
                                                                   stan::model::index_uni(lcm_sym143__),
                                                                    stan::model::index_uni(1)))), pstream__)));
              for (int m = 2; m <= lcm_sym141__; ++m) {
                current_statement__ = 156;
                stan::model::assign(expected_model_counts,
                  stan::math::multiply(
                    stan::math::multiply(
                      stan::model::rvalue(response, "response",
                        stan::model::index_uni(lcm_sym143__),
                          stan::model::index_uni(m),
                          stan::model::index_min_max(1, stan::model::rvalue(
                                                          N_chan, "N_chan",
                                                          stan::model::index_uni(lcm_sym143__),
                                                            stan::model::index_uni(m))),
                          stan::model::index_min_max(1, stan::model::rvalue(
                                                          N_echan, "N_echan",
                                                          stan::model::index_uni(lcm_sym143__),
                                                            stan::model::index_uni(m)))),
                      integral_flux(
                        stan::model::rvalue(ebounds_lo, "ebounds_lo",
                          stan::model::index_uni(lcm_sym143__),
                            stan::model::index_uni(m),
                            stan::model::index_min_max(1, stan::model::rvalue(
                                                            N_echan,
                                                            "N_echan",
                                                            stan::model::index_uni(lcm_sym143__),
                                                              stan::model::index_uni(m)))),
                        stan::model::rvalue(ebounds_hi, "ebounds_hi",
                          stan::model::index_uni(lcm_sym143__),
                            stan::model::index_uni(m),
                            stan::model::index_min_max(1, stan::model::rvalue(
                                                            N_echan,
                                                            "N_echan",
                                                            stan::model::index_uni(lcm_sym143__),
                                                              stan::model::index_uni(m)))),
                        stan::model::rvalue(ebounds_add, "ebounds_add",
                          stan::model::index_uni(lcm_sym143__),
                            stan::model::index_uni(m),
                            stan::model::index_min_max(1, stan::model::rvalue(
                                                            N_echan,
                                                            "N_echan",
                                                            stan::model::index_uni(lcm_sym143__),
                                                              stan::model::index_uni(m)))),
                        stan::model::rvalue(ebounds_half, "ebounds_half",
                          stan::model::index_uni(lcm_sym143__),
                            stan::model::index_uni(m),
                            stan::model::index_min_max(1, stan::model::rvalue(
                                                            N_echan,
                                                            "N_echan",
                                                            stan::model::index_uni(lcm_sym143__),
                                                              stan::model::index_uni(m)))),
                        K[(lcm_sym143__ - 1)], ec[(lcm_sym143__ - 1)],
                        alpha[(lcm_sym143__ - 1)], pstream__)),
                    stan::model::rvalue(exposure, "exposure",
                      stan::model::index_uni(lcm_sym143__),
                        stan::model::index_uni(m))),
                  "assigning variable expected_model_counts", stan::model::index_uni(m),
                                                                stan::model::index_min_max(1, 
                                                                stan::model::rvalue(
                                                                  N_chan,
                                                                  "N_chan",
                                                                  stan::model::index_uni(lcm_sym143__),
                                                                    stan::model::index_uni(m))));
                current_statement__ = 157;
                log_like = (log_like +
                             stan::math::sum(
                               pgstat(
                                 stan::model::rvalue(observed_counts,
                                   "observed_counts",
                                   stan::model::index_uni(lcm_sym143__),
                                     stan::model::index_uni(m),
                                     stan::model::index_multi(stan::model::rvalue(
                                                                mask, "mask",
                                                                stan::model::index_uni(lcm_sym143__),
                                                                  stan::model::index_uni(m),
                                                                  stan::model::index_min_max(1, 
                                                                  stan::model::rvalue(
                                                                    N_channels_used,
                                                                    "N_channels_used",
                                                                    stan::model::index_uni(lcm_sym143__),
                                                                    stan::model::index_uni(m)))))),
                                 stan::model::rvalue(background_counts,
                                   "background_counts",
                                   stan::model::index_uni(lcm_sym143__),
                                     stan::model::index_uni(m),
                                     stan::model::index_multi(stan::model::rvalue(
                                                                mask, "mask",
                                                                stan::model::index_uni(lcm_sym143__),
                                                                  stan::model::index_uni(m),
                                                                  stan::model::index_min_max(1, 
                                                                  stan::model::rvalue(
                                                                    N_channels_used,
                                                                    "N_channels_used",
                                                                    stan::model::index_uni(lcm_sym143__),
                                                                    stan::model::index_uni(m)))))),
                                 stan::model::rvalue(background_errors,
                                   "background_errors",
                                   stan::model::index_uni(lcm_sym143__),
                                     stan::model::index_uni(m),
                                     stan::model::index_multi(stan::model::rvalue(
                                                                mask, "mask",
                                                                stan::model::index_uni(lcm_sym143__),
                                                                  stan::model::index_uni(m),
                                                                  stan::model::index_min_max(1, 
                                                                  stan::model::rvalue(
                                                                    N_channels_used,
                                                                    "N_channels_used",
                                                                    stan::model::index_uni(lcm_sym143__),
                                                                    stan::model::index_uni(m)))))),
                                 stan::model::rvalue(expected_model_counts,
                                   "expected_model_counts",
                                   stan::model::index_uni(m),
                                     stan::model::index_multi(stan::model::rvalue(
                                                                mask, "mask",
                                                                stan::model::index_uni(lcm_sym143__),
                                                                  stan::model::index_uni(m),
                                                                  stan::model::index_min_max(1, 
                                                                  stan::model::rvalue(
                                                                    N_channels_used,
                                                                    "N_channels_used",
                                                                    stan::model::index_uni(lcm_sym143__),
                                                                    stan::model::index_uni(m)))))),
                                 stan::model::rvalue(idx_background_zero,
                                   "idx_background_zero",
                                   stan::model::index_uni(lcm_sym143__),
                                     stan::model::index_uni(m),
                                     stan::model::index_min_max(1, stan::model::rvalue(
                                                                    N_bkg_zero,
                                                                    "N_bkg_zero",
                                                                    stan::model::index_uni(lcm_sym143__),
                                                                    stan::model::index_uni(m)))),
                                 stan::model::rvalue(idx_background_nonzero,
                                   "idx_background_nonzero",
                                   stan::model::index_uni(lcm_sym143__),
                                     stan::model::index_uni(m),
                                     stan::model::index_min_max(1, stan::model::rvalue(
                                                                    N_bkg_nonzero,
                                                                    "N_bkg_nonzero",
                                                                    stan::model::index_uni(lcm_sym143__),
                                                                    stan::model::index_uni(m)))), pstream__)));
              }
            } 
          }
        } 
        current_statement__ = 161;
        return log_like;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_stan_scalar<T4__>,
                              stan::is_stan_scalar<T5__>,
                              stan::is_stan_scalar<T6__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>, stan::base_type_t<T3__>, T4__,
                     stan::promote_args_t<T5__, T6__>>, -1, 1>
integral_flux_functor__::operator()(const T0__& ebounds_lo,
                                    const T1__& ebounds_hi,
                                    const T2__& ebounds_add,
                                    const T3__& ebounds_half,
                                    const T4__& norm, const T5__& ec,
                                    const T6__& alpha,
                                    std::ostream* pstream__)  const
{
  return integral_flux(ebounds_lo, ebounds_hi, ebounds_add, ebounds_half,
           norm, ec, alpha, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>, stan::base_type_t<T3__>>, -1, 1>
background_model_functor__::operator()(const T0__& observed_counts,
                                       const T1__& background_counts,
                                       const T2__& background_error,
                                       const T3__& expected_model_counts,
                                       std::ostream* pstream__)  const
{
  return background_model(observed_counts, background_counts,
           background_error, expected_model_counts, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>, -1, 1>
cpl_functor__::operator()(const T0__& energy, const T1__& norm,
                          const T2__& ec, const T3__& alpha,
                          std::ostream* pstream__)  const
{
  return cpl(energy, norm, ec, alpha, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, stan::base_type_t<T1__>,
                     stan::base_type_t<T2__>, stan::base_type_t<T3__>>, -1, 1>
pgstat_functor__::operator()(const T0__& observed_counts,
                             const T1__& background_counts,
                             const T2__& background_error,
                             const T3__& expected_model_counts,
                             const std::vector<int>& idx_background_zero,
                             const std::vector<int>& idx_background_nonzero,
                             std::ostream* pstream__)  const
{
  return pgstat(observed_counts, background_counts, background_error,
           expected_model_counts, idx_background_zero,
           idx_background_nonzero, pstream__);
}

template <typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T8__, typename T11__, typename T12__,
          typename T13__, typename T14__, typename T15__, typename T16__,
          typename T25__, typename T26__,
          stan::require_all_t<stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>,
                              stan::is_stan_scalar<T8__>,
                              stan::is_stan_scalar<T11__>,
                              stan::is_stan_scalar<T12__>,
                              stan::is_stan_scalar<T13__>,
                              stan::is_stan_scalar<T14__>,
                              stan::is_stan_scalar<T15__>,
                              stan::is_stan_scalar<T16__>,
                              stan::is_stan_scalar<T25__>,
                              stan::is_stan_scalar<T26__>>*>
stan::promote_args_t<stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                     stan::base_type_t<T5__>, T6__, T7__,
                     stan::promote_args_t<T8__, T11__, T12__, T13__, T14__,
                                          stan::promote_args_t<T15__, T16__,
                                                               T25__, T26__>>>
partial_log_like_rsfunctor__::operator()(const std::vector<int>& n_slice,
                                         const int& start, const int& end,
                                         std::ostream* pstream__,
                                         const T3__& alpha, const T4__& ec,
                                         const T5__& K,
                                         const std::vector<std::vector<Eigen::Matrix<T6__, -1, 1>>>& observed_counts,
                                         const std::vector<std::vector<Eigen::Matrix<T7__, -1, 1>>>& background_counts,
                                         const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& background_errors,
                                         const std::vector<std::vector<std::vector<int>>>& mask,
                                         const std::vector<std::vector<int>>& N_channels_used,
                                         const std::vector<std::vector<T11__>>& exposure,
                                         const std::vector<std::vector<Eigen::Matrix<T12__, -1, 1>>>& ebounds_lo,
                                         const std::vector<std::vector<Eigen::Matrix<T13__, -1, 1>>>& ebounds_hi,
                                         const std::vector<std::vector<Eigen::Matrix<T14__, -1, 1>>>& ebounds_add,
                                         const std::vector<std::vector<Eigen::Matrix<T15__, -1, 1>>>& ebounds_half,
                                         const std::vector<std::vector<Eigen::Matrix<T16__, -1, -1>>>& response,
                                         const std::vector<std::vector<std::vector<int>>>& idx_background_zero,
                                         const std::vector<std::vector<std::vector<int>>>& idx_background_nonzero,
                                         const std::vector<std::vector<int>>& N_bkg_zero,
                                         const std::vector<std::vector<int>>& N_bkg_nonzero,
                                         const std::vector<int>& N_dets,
                                         const std::vector<std::vector<int>>& N_chan,
                                         const std::vector<std::vector<int>>& N_echan,
                                         const int& max_n_chan,
                                         const T25__& emin, const T26__& emax) 
const
{
  return partial_log_like(n_slice, start + 1, end + 1, alpha, ec, K,
           observed_counts, background_counts, background_errors, mask,
           N_channels_used, exposure, ebounds_lo, ebounds_hi, ebounds_add,
           ebounds_half, response, idx_background_zero,
           idx_background_nonzero, N_bkg_zero, N_bkg_nonzero, N_dets, N_chan,
           N_echan, max_n_chan, emin, emax, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__>
ggrb_int_cpl_functor__::operator()(const T0__& alpha, const T1__& ec,
                                   const T2__& emin, const T3__& emax,
                                   std::ostream* pstream__)  const
{
  return ggrb_int_cpl(alpha, ec, emin, emax, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__>
cpl_flux_integrand_functor__::operator()(const T0__& x, const T1__& xc,
                                         const std::vector<T2__>& theta,
                                         const std::vector<T3__>& x_r,
                                         const std::vector<int>& x_i,
                                         std::ostream* pstream__)  const
{
  return cpl_flux_integrand(x, xc, theta, x_r, x_i, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__, T2__, T3__>, -1, 1>
differential_flux_functor__::operator()(const T0__& energy, const T1__& norm,
                                        const T2__& ec, const T3__& alpha,
                                        std::ostream* pstream__)  const
{
  return differential_flux(energy, norm, ec, alpha, pstream__);
}

template <typename T3__, typename T4__, typename T5__, typename T6__,
          typename T7__, typename T8__, typename T11__, typename T12__,
          typename T13__, typename T14__, typename T15__, typename T16__,
          typename T25__, typename T26__,
          stan::require_all_t<stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T6__>,
                              stan::is_stan_scalar<T7__>,
                              stan::is_stan_scalar<T8__>,
                              stan::is_stan_scalar<T11__>,
                              stan::is_stan_scalar<T12__>,
                              stan::is_stan_scalar<T13__>,
                              stan::is_stan_scalar<T14__>,
                              stan::is_stan_scalar<T15__>,
                              stan::is_stan_scalar<T16__>,
                              stan::is_stan_scalar<T25__>,
                              stan::is_stan_scalar<T26__>>*>
stan::promote_args_t<stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                     stan::base_type_t<T5__>, T6__, T7__,
                     stan::promote_args_t<T8__, T11__, T12__, T13__, T14__,
                                          stan::promote_args_t<T15__, T16__,
                                                               T25__, T26__>>>
partial_log_like_functor__::operator()(const std::vector<int>& n_slice,
                                       const int& start, const int& end,
                                       const T3__& alpha, const T4__& ec,
                                       const T5__& K,
                                       const std::vector<std::vector<Eigen::Matrix<T6__, -1, 1>>>& observed_counts,
                                       const std::vector<std::vector<Eigen::Matrix<T7__, -1, 1>>>& background_counts,
                                       const std::vector<std::vector<Eigen::Matrix<T8__, -1, 1>>>& background_errors,
                                       const std::vector<std::vector<std::vector<int>>>& mask,
                                       const std::vector<std::vector<int>>& N_channels_used,
                                       const std::vector<std::vector<T11__>>& exposure,
                                       const std::vector<std::vector<Eigen::Matrix<T12__, -1, 1>>>& ebounds_lo,
                                       const std::vector<std::vector<Eigen::Matrix<T13__, -1, 1>>>& ebounds_hi,
                                       const std::vector<std::vector<Eigen::Matrix<T14__, -1, 1>>>& ebounds_add,
                                       const std::vector<std::vector<Eigen::Matrix<T15__, -1, 1>>>& ebounds_half,
                                       const std::vector<std::vector<Eigen::Matrix<T16__, -1, -1>>>& response,
                                       const std::vector<std::vector<std::vector<int>>>& idx_background_zero,
                                       const std::vector<std::vector<std::vector<int>>>& idx_background_nonzero,
                                       const std::vector<std::vector<int>>& N_bkg_zero,
                                       const std::vector<std::vector<int>>& N_bkg_nonzero,
                                       const std::vector<int>& N_dets,
                                       const std::vector<std::vector<int>>& N_chan,
                                       const std::vector<std::vector<int>>& N_echan,
                                       const int& max_n_chan,
                                       const T25__& emin, const T26__& emax,
                                       std::ostream* pstream__)  const
{
  return partial_log_like(n_slice, start, end, alpha, ec, K, observed_counts,
           background_counts, background_errors, mask, N_channels_used,
           exposure, ebounds_lo, ebounds_hi, ebounds_add, ebounds_half,
           response, idx_background_zero, idx_background_nonzero, N_bkg_zero,
           N_bkg_nonzero, N_dets, N_chan, N_echan, max_n_chan, emin, emax,
           pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
stan::promote_args_t<T0__, T1__, T2__, T3__>
cpl_indi_functor__::operator()(const T0__& energy, const T1__& K,
                               const T2__& alpha, const T3__& ec,
                               std::ostream* pstream__)  const
{
  return cpl_indi(energy, K, alpha, ec, pstream__);
}


class cpl_simple_chunked_model final : public model_base_crtp<cpl_simple_chunked_model> {

 private:
  double lcm_sym219__;
  double lcm_sym218__;
  double lcm_sym217__;
  double lcm_sym216__;
  double lcm_sym215__;
  double lcm_sym214__;
  int lcm_sym213__;
  int lcm_sym212__;
  int lcm_sym211__;
  int lcm_sym210__;
  int lcm_sym209__;
  int lcm_sym208__;
  double lcm_sym207__;
  double lcm_sym206__;
  double lcm_sym205__;
  double lcm_sym204__;
  double lcm_sym203__;
  double lcm_sym202__;
  double lcm_sym201__;
  double lcm_sym200__;
  double lcm_sym199__;
  double lcm_sym198__;
  double lcm_sym197__;
  double lcm_sym196__;
  int lcm_sym195__;
  int lcm_sym194__;
  int lcm_sym193__;
  int lcm_sym192__;
  int lcm_sym191__;
  int lcm_sym190__;
  int lcm_sym189__;
  int lcm_sym188__;
  int lcm_sym187__;
  int lcm_sym186__;
  int lcm_sym185__;
  int lcm_sym184__;
  int lcm_sym183__;
  int lcm_sym182__;
  int lcm_sym181__;
  int lcm_sym180__;
  Eigen::Matrix<double, -1, 1> lcm_sym179___data__;
  int lcm_sym178__;
  Eigen::Matrix<double, -1, 1> lcm_sym177___data__;
  Eigen::Matrix<double, -1, 1> lcm_sym176___data__;
  Eigen::Matrix<double, -1, 1> lcm_sym175___data__;
  Eigen::Matrix<double, -1, 1> lcm_sym174___data__;
  int lcm_sym173__;
  int lcm_sym172__;
  int lcm_sym171__;
  int lcm_sym170__;
  int lcm_sym169__;
  int lcm_sym168__;
  int lcm_sym167__;
  int lcm_sym166__;
  int lcm_sym165__;
  int lcm_sym164__;
  int lcm_sym163__;
  Eigen::Matrix<double, -1, 1> lcm_sym162___data__;
  Eigen::Matrix<double, -1, 1> lcm_sym161___data__;
  Eigen::Matrix<double, -1, 1> lcm_sym160___data__;
  Eigen::Matrix<double, -1, 1> lcm_sym159___data__;
  int N_intervals;
  int max_n_echan;
  int max_n_chan;
  std::vector<int> N_dets;
  std::vector<std::vector<int>> N_chan;
  std::vector<std::vector<int>> N_echan;
  std::vector<int> grb_id;
  int N_grbs;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> ebounds_hi;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> ebounds_lo;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> observed_counts;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> background_counts;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> background_errors;
  std::vector<std::vector<std::vector<int>>> idx_background_zero;
  std::vector<std::vector<std::vector<int>>> idx_background_nonzero;
  std::vector<std::vector<int>> N_bkg_zero;
  std::vector<std::vector<int>> N_bkg_nonzero;
  std::vector<std::vector<double>> exposure;
  std::vector<std::vector<Eigen::Matrix<double, -1, -1>>> response;
  std::vector<std::vector<std::vector<int>>> mask;
  std::vector<std::vector<int>> N_channels_used;
  Eigen::Matrix<double, -1, 1> dl_data__;
  Eigen::Matrix<double, -1, 1> z_data__;
  std::vector<double> x_r;
  std::vector<int> x_i;
  double kev2erg;
  double erg2kev;
  Eigen::Matrix<double, -1, 1> dl2_data__;
  int N_total_channels;
  double emin;
  double emax;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> ebounds_add;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> ebounds_half;
  std::vector<int> all_N; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> lcm_sym179__{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> lcm_sym177__{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> lcm_sym176__{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> lcm_sym175__{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> lcm_sym174__{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> lcm_sym162__{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> lcm_sym161__{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> lcm_sym160__{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> lcm_sym159__{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dl{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> z{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dl2{nullptr, 0};
 
 public:
  ~cpl_simple_chunked_model() { }
  
  inline std::string model_name() const final { return "cpl_simple_chunked_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.30.1", "stancflags = --Oexperimental --include-paths=/Users/chrobin/Documents/zusammen/zusammen/stan_models"};
  }
  
  
  cpl_simple_chunked_model(stan::io::var_context& context__,
                           unsigned int random_seed__ = 0,
                           std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "cpl_simple_chunked_model_namespace::cpl_simple_chunked_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      int pos__;
      pos__ = 1;
      current_statement__ = 11;
      context__.validate_dims("data initialization","N_intervals","int",
           std::vector<size_t>{});
      N_intervals = std::numeric_limits<int>::min();
      
      
      current_statement__ = 11;
      N_intervals = context__.vals_i("N_intervals")[(1 - 1)];
      current_statement__ = 11;
      stan::math::check_greater_or_equal(function__, "N_intervals",
                                            N_intervals, 1);
      current_statement__ = 12;
      context__.validate_dims("data initialization","max_n_echan","int",
           std::vector<size_t>{});
      max_n_echan = std::numeric_limits<int>::min();
      
      
      current_statement__ = 12;
      max_n_echan = context__.vals_i("max_n_echan")[(1 - 1)];
      current_statement__ = 13;
      context__.validate_dims("data initialization","max_n_chan","int",
           std::vector<size_t>{});
      max_n_chan = std::numeric_limits<int>::min();
      
      
      current_statement__ = 13;
      max_n_chan = context__.vals_i("max_n_chan")[(1 - 1)];
      current_statement__ = 14;
      stan::math::validate_non_negative_index("N_dets", "N_intervals",
                                              N_intervals);
      current_statement__ = 15;
      context__.validate_dims("data initialization","N_dets","int",
           std::vector<size_t>{static_cast<size_t>(N_intervals)});
      N_dets = 
        std::vector<int>(N_intervals, std::numeric_limits<int>::min());
      
      
      current_statement__ = 15;
      N_dets = context__.vals_i("N_dets");
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "N_dets", N_dets, 0);
      current_statement__ = 16;
      stan::math::validate_non_negative_index("N_chan", "N_intervals",
                                              N_intervals);
      lcm_sym178__ = stan::math::max(N_dets);
      stan::math::validate_non_negative_index("N_chan", "max(N_dets)",
                                              lcm_sym178__);
      current_statement__ = 17;
      context__.validate_dims("data initialization","N_chan","int",
           std::vector<size_t>{static_cast<size_t>(N_intervals),
            static_cast<size_t>(lcm_sym178__)});
      N_chan = 
        std::vector<std::vector<int>>(N_intervals, 
          std::vector<int>(lcm_sym178__, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> N_chan_flat__;
        current_statement__ = 17;
        N_chan_flat__ = context__.vals_i("N_chan");
        current_statement__ = 17;
        pos__ = 1;
        lcm_sym166__ = stan::math::logical_gte(lcm_sym178__, 1);
        if (lcm_sym166__) {
          {
            lcm_sym163__ = stan::math::logical_gte(N_intervals, 1);
            if (lcm_sym163__) {
              current_statement__ = 17;
              stan::model::assign(N_chan,
                stan::model::rvalue(N_chan_flat__, "N_chan_flat__",
                  stan::model::index_uni(1)),
                "assigning variable N_chan", stan::model::index_uni(1),
                                               stan::model::index_uni(1));
              current_statement__ = 17;
              pos__ = 2;
              for (int sym2__ = 2; sym2__ <= N_intervals; ++sym2__) {
                current_statement__ = 17;
                stan::model::assign(N_chan, N_chan_flat__[(pos__ - 1)],
                  "assigning variable N_chan", stan::model::index_uni(sym2__),
                                                 stan::model::index_uni(1));
                current_statement__ = 17;
                pos__ = (pos__ + 1);
              }
            } 
            for (int sym1__ = 2; sym1__ <= lcm_sym178__; ++sym1__) {
              current_statement__ = 17;
              if (lcm_sym163__) {
                current_statement__ = 17;
                stan::model::assign(N_chan, N_chan_flat__[(pos__ - 1)],
                  "assigning variable N_chan", stan::model::index_uni(1),
                                                 stan::model::index_uni(sym1__));
                current_statement__ = 17;
                pos__ = (pos__ + 1);
                for (int sym2__ = 2; sym2__ <= N_intervals; ++sym2__) {
                  current_statement__ = 17;
                  stan::model::assign(N_chan, N_chan_flat__[(pos__ - 1)],
                    "assigning variable N_chan", stan::model::index_uni(sym2__),
                                                   stan::model::index_uni(sym1__));
                  current_statement__ = 17;
                  pos__ = (pos__ + 1);
                }
              } 
            }
          }
        } else {
          lcm_sym163__ = stan::math::logical_gte(N_intervals, 1);
        }
      }
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "N_chan", N_chan, 0);
      current_statement__ = 18;
      stan::math::validate_non_negative_index("N_echan", "N_intervals",
                                              N_intervals);
      current_statement__ = 19;
      stan::math::validate_non_negative_index("N_echan", "max(N_dets)",
                                              lcm_sym178__);
      current_statement__ = 20;
      context__.validate_dims("data initialization","N_echan","int",
           std::vector<size_t>{static_cast<size_t>(N_intervals),
            static_cast<size_t>(lcm_sym178__)});
      N_echan = 
        std::vector<std::vector<int>>(N_intervals, 
          std::vector<int>(lcm_sym178__, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> N_echan_flat__;
        current_statement__ = 20;
        N_echan_flat__ = context__.vals_i("N_echan");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        if (lcm_sym166__) {
          current_statement__ = 20;
          if (lcm_sym163__) {
            current_statement__ = 20;
            stan::model::assign(N_echan,
              stan::model::rvalue(N_echan_flat__, "N_echan_flat__",
                stan::model::index_uni(1)),
              "assigning variable N_echan", stan::model::index_uni(1),
                                              stan::model::index_uni(1));
            current_statement__ = 20;
            pos__ = 2;
            for (int sym2__ = 2; sym2__ <= N_intervals; ++sym2__) {
              current_statement__ = 20;
              stan::model::assign(N_echan, N_echan_flat__[(pos__ - 1)],
                "assigning variable N_echan", stan::model::index_uni(sym2__),
                                                stan::model::index_uni(1));
              current_statement__ = 20;
              pos__ = (pos__ + 1);
            }
          } 
          for (int sym1__ = 2; sym1__ <= lcm_sym178__; ++sym1__) {
            current_statement__ = 20;
            if (lcm_sym163__) {
              current_statement__ = 20;
              stan::model::assign(N_echan, N_echan_flat__[(pos__ - 1)],
                "assigning variable N_echan", stan::model::index_uni(1),
                                                stan::model::index_uni(sym1__));
              current_statement__ = 20;
              pos__ = (pos__ + 1);
              for (int sym2__ = 2; sym2__ <= N_intervals; ++sym2__) {
                current_statement__ = 20;
                stan::model::assign(N_echan, N_echan_flat__[(pos__ - 1)],
                  "assigning variable N_echan", stan::model::index_uni(sym2__),
                                                  stan::model::index_uni(sym1__));
                current_statement__ = 20;
                pos__ = (pos__ + 1);
              }
            } 
          }
        } 
      }
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "N_echan", N_echan, 0);
      current_statement__ = 21;
      stan::math::validate_non_negative_index("grb_id", "N_intervals",
                                              N_intervals);
      current_statement__ = 22;
      context__.validate_dims("data initialization","grb_id","int",
           std::vector<size_t>{static_cast<size_t>(N_intervals)});
      grb_id = 
        std::vector<int>(N_intervals, std::numeric_limits<int>::min());
      
      
      current_statement__ = 22;
      grb_id = context__.vals_i("grb_id");
      current_statement__ = 23;
      context__.validate_dims("data initialization","N_grbs","int",
           std::vector<size_t>{});
      N_grbs = std::numeric_limits<int>::min();
      
      
      current_statement__ = 23;
      N_grbs = context__.vals_i("N_grbs")[(1 - 1)];
      current_statement__ = 24;
      stan::math::validate_non_negative_index("ebounds_hi", "N_intervals",
                                              N_intervals);
      current_statement__ = 25;
      stan::math::validate_non_negative_index("ebounds_hi", "max(N_dets)",
                                              lcm_sym178__);
      current_statement__ = 26;
      stan::math::validate_non_negative_index("ebounds_hi", "max_n_echan",
                                              max_n_echan);
      current_statement__ = 27;
      context__.validate_dims("data initialization","ebounds_hi","double",
           std::vector<size_t>{static_cast<size_t>(N_intervals),
            static_cast<size_t>(lcm_sym178__),
            static_cast<size_t>(max_n_echan)});
      ebounds_hi = 
        std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(N_intervals, 
          std::vector<Eigen::Matrix<double, -1, 1>>(lcm_sym178__, 
            Eigen::Matrix<double, -1, 1>::Constant(max_n_echan,
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<double> ebounds_hi_flat__;
        current_statement__ = 27;
        ebounds_hi_flat__ = context__.vals_r("ebounds_hi");
        current_statement__ = 27;
        pos__ = 1;
        lcm_sym165__ = stan::math::logical_gte(max_n_echan, 1);
        if (lcm_sym165__) {
          current_statement__ = 27;
          if (lcm_sym166__) {
            current_statement__ = 27;
            if (lcm_sym163__) {
              current_statement__ = 27;
              stan::model::assign(ebounds_hi,
                stan::model::rvalue(ebounds_hi_flat__, "ebounds_hi_flat__",
                  stan::model::index_uni(1)),
                "assigning variable ebounds_hi", stan::model::index_uni(1),
                                                   stan::model::index_uni(1),
                                                   stan::model::index_uni(1));
              current_statement__ = 27;
              pos__ = 2;
              for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                current_statement__ = 27;
                stan::model::assign(ebounds_hi,
                  ebounds_hi_flat__[(pos__ - 1)],
                  "assigning variable ebounds_hi", stan::model::index_uni(sym3__),
                                                     stan::model::index_uni(1),
                                                     stan::model::index_uni(1));
                current_statement__ = 27;
                pos__ = (pos__ + 1);
              }
            } 
            for (int sym2__ = 2; sym2__ <= lcm_sym178__; ++sym2__) {
              current_statement__ = 27;
              if (lcm_sym163__) {
                current_statement__ = 27;
                stan::model::assign(ebounds_hi,
                  ebounds_hi_flat__[(pos__ - 1)],
                  "assigning variable ebounds_hi", stan::model::index_uni(1),
                                                     stan::model::index_uni(sym2__),
                                                     stan::model::index_uni(1));
                current_statement__ = 27;
                pos__ = (pos__ + 1);
                for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                  current_statement__ = 27;
                  stan::model::assign(ebounds_hi,
                    ebounds_hi_flat__[(pos__ - 1)],
                    "assigning variable ebounds_hi", stan::model::index_uni(sym3__),
                                                       stan::model::index_uni(sym2__),
                                                       stan::model::index_uni(1));
                  current_statement__ = 27;
                  pos__ = (pos__ + 1);
                }
              } 
            }
          } 
          for (int sym1__ = 2; sym1__ <= max_n_echan; ++sym1__) {
            current_statement__ = 27;
            if (lcm_sym166__) {
              current_statement__ = 27;
              if (lcm_sym163__) {
                current_statement__ = 27;
                stan::model::assign(ebounds_hi,
                  ebounds_hi_flat__[(pos__ - 1)],
                  "assigning variable ebounds_hi", stan::model::index_uni(1),
                                                     stan::model::index_uni(1),
                                                     stan::model::index_uni(sym1__));
                current_statement__ = 27;
                pos__ = (pos__ + 1);
                for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                  current_statement__ = 27;
                  stan::model::assign(ebounds_hi,
                    ebounds_hi_flat__[(pos__ - 1)],
                    "assigning variable ebounds_hi", stan::model::index_uni(sym3__),
                                                       stan::model::index_uni(1),
                                                       stan::model::index_uni(sym1__));
                  current_statement__ = 27;
                  pos__ = (pos__ + 1);
                }
              } 
              for (int sym2__ = 2; sym2__ <= lcm_sym178__; ++sym2__) {
                current_statement__ = 27;
                if (lcm_sym163__) {
                  current_statement__ = 27;
                  stan::model::assign(ebounds_hi,
                    ebounds_hi_flat__[(pos__ - 1)],
                    "assigning variable ebounds_hi", stan::model::index_uni(1),
                                                       stan::model::index_uni(sym2__),
                                                       stan::model::index_uni(sym1__));
                  current_statement__ = 27;
                  pos__ = (pos__ + 1);
                  for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                    current_statement__ = 27;
                    stan::model::assign(ebounds_hi,
                      ebounds_hi_flat__[(pos__ - 1)],
                      "assigning variable ebounds_hi", stan::model::index_uni(sym3__),
                                                         stan::model::index_uni(sym2__),
                                                         stan::model::index_uni(sym1__));
                    current_statement__ = 27;
                    pos__ = (pos__ + 1);
                  }
                } 
              }
            } 
          }
        } 
      }
      current_statement__ = 28;
      stan::math::validate_non_negative_index("ebounds_lo", "N_intervals",
                                              N_intervals);
      current_statement__ = 29;
      stan::math::validate_non_negative_index("ebounds_lo", "max(N_dets)",
                                              lcm_sym178__);
      current_statement__ = 30;
      stan::math::validate_non_negative_index("ebounds_lo", "max_n_echan",
                                              max_n_echan);
      current_statement__ = 31;
      context__.validate_dims("data initialization","ebounds_lo","double",
           std::vector<size_t>{static_cast<size_t>(N_intervals),
            static_cast<size_t>(lcm_sym178__),
            static_cast<size_t>(max_n_echan)});
      ebounds_lo = 
        std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(N_intervals, 
          std::vector<Eigen::Matrix<double, -1, 1>>(lcm_sym178__, 
            Eigen::Matrix<double, -1, 1>::Constant(max_n_echan,
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<double> ebounds_lo_flat__;
        current_statement__ = 31;
        ebounds_lo_flat__ = context__.vals_r("ebounds_lo");
        current_statement__ = 31;
        pos__ = 1;
        current_statement__ = 31;
        if (lcm_sym165__) {
          current_statement__ = 31;
          if (lcm_sym166__) {
            current_statement__ = 31;
            if (lcm_sym163__) {
              current_statement__ = 31;
              stan::model::assign(ebounds_lo,
                stan::model::rvalue(ebounds_lo_flat__, "ebounds_lo_flat__",
                  stan::model::index_uni(1)),
                "assigning variable ebounds_lo", stan::model::index_uni(1),
                                                   stan::model::index_uni(1),
                                                   stan::model::index_uni(1));
              current_statement__ = 31;
              pos__ = 2;
              for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                current_statement__ = 31;
                stan::model::assign(ebounds_lo,
                  ebounds_lo_flat__[(pos__ - 1)],
                  "assigning variable ebounds_lo", stan::model::index_uni(sym3__),
                                                     stan::model::index_uni(1),
                                                     stan::model::index_uni(1));
                current_statement__ = 31;
                pos__ = (pos__ + 1);
              }
            } 
            for (int sym2__ = 2; sym2__ <= lcm_sym178__; ++sym2__) {
              current_statement__ = 31;
              if (lcm_sym163__) {
                current_statement__ = 31;
                stan::model::assign(ebounds_lo,
                  ebounds_lo_flat__[(pos__ - 1)],
                  "assigning variable ebounds_lo", stan::model::index_uni(1),
                                                     stan::model::index_uni(sym2__),
                                                     stan::model::index_uni(1));
                current_statement__ = 31;
                pos__ = (pos__ + 1);
                for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                  current_statement__ = 31;
                  stan::model::assign(ebounds_lo,
                    ebounds_lo_flat__[(pos__ - 1)],
                    "assigning variable ebounds_lo", stan::model::index_uni(sym3__),
                                                       stan::model::index_uni(sym2__),
                                                       stan::model::index_uni(1));
                  current_statement__ = 31;
                  pos__ = (pos__ + 1);
                }
              } 
            }
          } 
          for (int sym1__ = 2; sym1__ <= max_n_echan; ++sym1__) {
            current_statement__ = 31;
            if (lcm_sym166__) {
              current_statement__ = 31;
              if (lcm_sym163__) {
                current_statement__ = 31;
                stan::model::assign(ebounds_lo,
                  ebounds_lo_flat__[(pos__ - 1)],
                  "assigning variable ebounds_lo", stan::model::index_uni(1),
                                                     stan::model::index_uni(1),
                                                     stan::model::index_uni(sym1__));
                current_statement__ = 31;
                pos__ = (pos__ + 1);
                for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                  current_statement__ = 31;
                  stan::model::assign(ebounds_lo,
                    ebounds_lo_flat__[(pos__ - 1)],
                    "assigning variable ebounds_lo", stan::model::index_uni(sym3__),
                                                       stan::model::index_uni(1),
                                                       stan::model::index_uni(sym1__));
                  current_statement__ = 31;
                  pos__ = (pos__ + 1);
                }
              } 
              for (int sym2__ = 2; sym2__ <= lcm_sym178__; ++sym2__) {
                current_statement__ = 31;
                if (lcm_sym163__) {
                  current_statement__ = 31;
                  stan::model::assign(ebounds_lo,
                    ebounds_lo_flat__[(pos__ - 1)],
                    "assigning variable ebounds_lo", stan::model::index_uni(1),
                                                       stan::model::index_uni(sym2__),
                                                       stan::model::index_uni(sym1__));
                  current_statement__ = 31;
                  pos__ = (pos__ + 1);
                  for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                    current_statement__ = 31;
                    stan::model::assign(ebounds_lo,
                      ebounds_lo_flat__[(pos__ - 1)],
                      "assigning variable ebounds_lo", stan::model::index_uni(sym3__),
                                                         stan::model::index_uni(sym2__),
                                                         stan::model::index_uni(sym1__));
                    current_statement__ = 31;
                    pos__ = (pos__ + 1);
                  }
                } 
              }
            } 
          }
        } 
      }
      current_statement__ = 32;
      stan::math::validate_non_negative_index("observed_counts",
                                              "N_intervals", N_intervals);
      current_statement__ = 33;
      stan::math::validate_non_negative_index("observed_counts",
                                              "max(N_dets)", lcm_sym178__);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("observed_counts",
                                              "max_n_chan", max_n_chan);
      current_statement__ = 35;
      context__.validate_dims("data initialization","observed_counts",
          "double",
           std::vector<size_t>{static_cast<size_t>(N_intervals),
            static_cast<size_t>(lcm_sym178__),
            static_cast<size_t>(max_n_chan)});
      observed_counts = 
        std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(N_intervals, 
          std::vector<Eigen::Matrix<double, -1, 1>>(lcm_sym178__, 
            Eigen::Matrix<double, -1, 1>::Constant(max_n_chan,
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<double> observed_counts_flat__;
        current_statement__ = 35;
        observed_counts_flat__ = context__.vals_r("observed_counts");
        current_statement__ = 35;
        pos__ = 1;
        lcm_sym164__ = stan::math::logical_gte(max_n_chan, 1);
        if (lcm_sym164__) {
          current_statement__ = 35;
          if (lcm_sym166__) {
            current_statement__ = 35;
            if (lcm_sym163__) {
              current_statement__ = 35;
              stan::model::assign(observed_counts,
                stan::model::rvalue(observed_counts_flat__,
                  "observed_counts_flat__", stan::model::index_uni(1)),
                "assigning variable observed_counts", stan::model::index_uni(1),
                                                        stan::model::index_uni(1),
                                                        stan::model::index_uni(1));
              current_statement__ = 35;
              pos__ = 2;
              for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                current_statement__ = 35;
                stan::model::assign(observed_counts,
                  observed_counts_flat__[(pos__ - 1)],
                  "assigning variable observed_counts", stan::model::index_uni(sym3__),
                                                          stan::model::index_uni(1),
                                                          stan::model::index_uni(1));
                current_statement__ = 35;
                pos__ = (pos__ + 1);
              }
            } 
            for (int sym2__ = 2; sym2__ <= lcm_sym178__; ++sym2__) {
              current_statement__ = 35;
              if (lcm_sym163__) {
                current_statement__ = 35;
                stan::model::assign(observed_counts,
                  observed_counts_flat__[(pos__ - 1)],
                  "assigning variable observed_counts", stan::model::index_uni(1),
                                                          stan::model::index_uni(sym2__),
                                                          stan::model::index_uni(1));
                current_statement__ = 35;
                pos__ = (pos__ + 1);
                for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                  current_statement__ = 35;
                  stan::model::assign(observed_counts,
                    observed_counts_flat__[(pos__ - 1)],
                    "assigning variable observed_counts", stan::model::index_uni(sym3__),
                                                            stan::model::index_uni(sym2__),
                                                            stan::model::index_uni(1));
                  current_statement__ = 35;
                  pos__ = (pos__ + 1);
                }
              } 
            }
          } 
          for (int sym1__ = 2; sym1__ <= max_n_chan; ++sym1__) {
            current_statement__ = 35;
            if (lcm_sym166__) {
              current_statement__ = 35;
              if (lcm_sym163__) {
                current_statement__ = 35;
                stan::model::assign(observed_counts,
                  observed_counts_flat__[(pos__ - 1)],
                  "assigning variable observed_counts", stan::model::index_uni(1),
                                                          stan::model::index_uni(1),
                                                          stan::model::index_uni(sym1__));
                current_statement__ = 35;
                pos__ = (pos__ + 1);
                for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                  current_statement__ = 35;
                  stan::model::assign(observed_counts,
                    observed_counts_flat__[(pos__ - 1)],
                    "assigning variable observed_counts", stan::model::index_uni(sym3__),
                                                            stan::model::index_uni(1),
                                                            stan::model::index_uni(sym1__));
                  current_statement__ = 35;
                  pos__ = (pos__ + 1);
                }
              } 
              for (int sym2__ = 2; sym2__ <= lcm_sym178__; ++sym2__) {
                current_statement__ = 35;
                if (lcm_sym163__) {
                  current_statement__ = 35;
                  stan::model::assign(observed_counts,
                    observed_counts_flat__[(pos__ - 1)],
                    "assigning variable observed_counts", stan::model::index_uni(1),
                                                            stan::model::index_uni(sym2__),
                                                            stan::model::index_uni(sym1__));
                  current_statement__ = 35;
                  pos__ = (pos__ + 1);
                  for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                    current_statement__ = 35;
                    stan::model::assign(observed_counts,
                      observed_counts_flat__[(pos__ - 1)],
                      "assigning variable observed_counts", stan::model::index_uni(sym3__),
                                                              stan::model::index_uni(sym2__),
                                                              stan::model::index_uni(sym1__));
                    current_statement__ = 35;
                    pos__ = (pos__ + 1);
                  }
                } 
              }
            } 
          }
        } 
      }
      current_statement__ = 36;
      stan::math::validate_non_negative_index("background_counts",
                                              "N_intervals", N_intervals);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("background_counts",
                                              "max(N_dets)", lcm_sym178__);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("background_counts",
                                              "max_n_chan", max_n_chan);
      current_statement__ = 39;
      context__.validate_dims("data initialization","background_counts",
          "double",
           std::vector<size_t>{static_cast<size_t>(N_intervals),
            static_cast<size_t>(lcm_sym178__),
            static_cast<size_t>(max_n_chan)});
      background_counts = 
        std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(N_intervals, 
          std::vector<Eigen::Matrix<double, -1, 1>>(lcm_sym178__, 
            Eigen::Matrix<double, -1, 1>::Constant(max_n_chan,
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<double> background_counts_flat__;
        current_statement__ = 39;
        background_counts_flat__ = context__.vals_r("background_counts");
        current_statement__ = 39;
        pos__ = 1;
        current_statement__ = 39;
        if (lcm_sym164__) {
          current_statement__ = 39;
          if (lcm_sym166__) {
            current_statement__ = 39;
            if (lcm_sym163__) {
              current_statement__ = 39;
              stan::model::assign(background_counts,
                stan::model::rvalue(background_counts_flat__,
                  "background_counts_flat__", stan::model::index_uni(1)),
                "assigning variable background_counts", stan::model::index_uni(1),
                                                          stan::model::index_uni(1),
                                                          stan::model::index_uni(1));
              current_statement__ = 39;
              pos__ = 2;
              for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                current_statement__ = 39;
                stan::model::assign(background_counts,
                  background_counts_flat__[(pos__ - 1)],
                  "assigning variable background_counts", stan::model::index_uni(sym3__),
                                                            stan::model::index_uni(1),
                                                            stan::model::index_uni(1));
                current_statement__ = 39;
                pos__ = (pos__ + 1);
              }
            } 
            for (int sym2__ = 2; sym2__ <= lcm_sym178__; ++sym2__) {
              current_statement__ = 39;
              if (lcm_sym163__) {
                current_statement__ = 39;
                stan::model::assign(background_counts,
                  background_counts_flat__[(pos__ - 1)],
                  "assigning variable background_counts", stan::model::index_uni(1),
                                                            stan::model::index_uni(sym2__),
                                                            stan::model::index_uni(1));
                current_statement__ = 39;
                pos__ = (pos__ + 1);
                for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                  current_statement__ = 39;
                  stan::model::assign(background_counts,
                    background_counts_flat__[(pos__ - 1)],
                    "assigning variable background_counts", stan::model::index_uni(sym3__),
                                                              stan::model::index_uni(sym2__),
                                                              stan::model::index_uni(1));
                  current_statement__ = 39;
                  pos__ = (pos__ + 1);
                }
              } 
            }
          } 
          for (int sym1__ = 2; sym1__ <= max_n_chan; ++sym1__) {
            current_statement__ = 39;
            if (lcm_sym166__) {
              current_statement__ = 39;
              if (lcm_sym163__) {
                current_statement__ = 39;
                stan::model::assign(background_counts,
                  background_counts_flat__[(pos__ - 1)],
                  "assigning variable background_counts", stan::model::index_uni(1),
                                                            stan::model::index_uni(1),
                                                            stan::model::index_uni(sym1__));
                current_statement__ = 39;
                pos__ = (pos__ + 1);
                for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                  current_statement__ = 39;
                  stan::model::assign(background_counts,
                    background_counts_flat__[(pos__ - 1)],
                    "assigning variable background_counts", stan::model::index_uni(sym3__),
                                                              stan::model::index_uni(1),
                                                              stan::model::index_uni(sym1__));
                  current_statement__ = 39;
                  pos__ = (pos__ + 1);
                }
              } 
              for (int sym2__ = 2; sym2__ <= lcm_sym178__; ++sym2__) {
                current_statement__ = 39;
                if (lcm_sym163__) {
                  current_statement__ = 39;
                  stan::model::assign(background_counts,
                    background_counts_flat__[(pos__ - 1)],
                    "assigning variable background_counts", stan::model::index_uni(1),
                                                              stan::model::index_uni(sym2__),
                                                              stan::model::index_uni(sym1__));
                  current_statement__ = 39;
                  pos__ = (pos__ + 1);
                  for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                    current_statement__ = 39;
                    stan::model::assign(background_counts,
                      background_counts_flat__[(pos__ - 1)],
                      "assigning variable background_counts", stan::model::index_uni(sym3__),
                                                                stan::model::index_uni(sym2__),
                                                                stan::model::index_uni(sym1__));
                    current_statement__ = 39;
                    pos__ = (pos__ + 1);
                  }
                } 
              }
            } 
          }
        } 
      }
      current_statement__ = 40;
      stan::math::validate_non_negative_index("background_errors",
                                              "N_intervals", N_intervals);
      current_statement__ = 41;
      stan::math::validate_non_negative_index("background_errors",
                                              "max(N_dets)", lcm_sym178__);
      current_statement__ = 42;
      stan::math::validate_non_negative_index("background_errors",
                                              "max_n_chan", max_n_chan);
      current_statement__ = 43;
      context__.validate_dims("data initialization","background_errors",
          "double",
           std::vector<size_t>{static_cast<size_t>(N_intervals),
            static_cast<size_t>(lcm_sym178__),
            static_cast<size_t>(max_n_chan)});
      background_errors = 
        std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(N_intervals, 
          std::vector<Eigen::Matrix<double, -1, 1>>(lcm_sym178__, 
            Eigen::Matrix<double, -1, 1>::Constant(max_n_chan,
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<double> background_errors_flat__;
        current_statement__ = 43;
        background_errors_flat__ = context__.vals_r("background_errors");
        current_statement__ = 43;
        pos__ = 1;
        current_statement__ = 43;
        if (lcm_sym164__) {
          current_statement__ = 43;
          if (lcm_sym166__) {
            current_statement__ = 43;
            if (lcm_sym163__) {
              current_statement__ = 43;
              stan::model::assign(background_errors,
                stan::model::rvalue(background_errors_flat__,
                  "background_errors_flat__", stan::model::index_uni(1)),
                "assigning variable background_errors", stan::model::index_uni(1),
                                                          stan::model::index_uni(1),
                                                          stan::model::index_uni(1));
              current_statement__ = 43;
              pos__ = 2;
              for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                current_statement__ = 43;
                stan::model::assign(background_errors,
                  background_errors_flat__[(pos__ - 1)],
                  "assigning variable background_errors", stan::model::index_uni(sym3__),
                                                            stan::model::index_uni(1),
                                                            stan::model::index_uni(1));
                current_statement__ = 43;
                pos__ = (pos__ + 1);
              }
            } 
            for (int sym2__ = 2; sym2__ <= lcm_sym178__; ++sym2__) {
              current_statement__ = 43;
              if (lcm_sym163__) {
                current_statement__ = 43;
                stan::model::assign(background_errors,
                  background_errors_flat__[(pos__ - 1)],
                  "assigning variable background_errors", stan::model::index_uni(1),
                                                            stan::model::index_uni(sym2__),
                                                            stan::model::index_uni(1));
                current_statement__ = 43;
                pos__ = (pos__ + 1);
                for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                  current_statement__ = 43;
                  stan::model::assign(background_errors,
                    background_errors_flat__[(pos__ - 1)],
                    "assigning variable background_errors", stan::model::index_uni(sym3__),
                                                              stan::model::index_uni(sym2__),
                                                              stan::model::index_uni(1));
                  current_statement__ = 43;
                  pos__ = (pos__ + 1);
                }
              } 
            }
          } 
          for (int sym1__ = 2; sym1__ <= max_n_chan; ++sym1__) {
            current_statement__ = 43;
            if (lcm_sym166__) {
              current_statement__ = 43;
              if (lcm_sym163__) {
                current_statement__ = 43;
                stan::model::assign(background_errors,
                  background_errors_flat__[(pos__ - 1)],
                  "assigning variable background_errors", stan::model::index_uni(1),
                                                            stan::model::index_uni(1),
                                                            stan::model::index_uni(sym1__));
                current_statement__ = 43;
                pos__ = (pos__ + 1);
                for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                  current_statement__ = 43;
                  stan::model::assign(background_errors,
                    background_errors_flat__[(pos__ - 1)],
                    "assigning variable background_errors", stan::model::index_uni(sym3__),
                                                              stan::model::index_uni(1),
                                                              stan::model::index_uni(sym1__));
                  current_statement__ = 43;
                  pos__ = (pos__ + 1);
                }
              } 
              for (int sym2__ = 2; sym2__ <= lcm_sym178__; ++sym2__) {
                current_statement__ = 43;
                if (lcm_sym163__) {
                  current_statement__ = 43;
                  stan::model::assign(background_errors,
                    background_errors_flat__[(pos__ - 1)],
                    "assigning variable background_errors", stan::model::index_uni(1),
                                                              stan::model::index_uni(sym2__),
                                                              stan::model::index_uni(sym1__));
                  current_statement__ = 43;
                  pos__ = (pos__ + 1);
                  for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                    current_statement__ = 43;
                    stan::model::assign(background_errors,
                      background_errors_flat__[(pos__ - 1)],
                      "assigning variable background_errors", stan::model::index_uni(sym3__),
                                                                stan::model::index_uni(sym2__),
                                                                stan::model::index_uni(sym1__));
                    current_statement__ = 43;
                    pos__ = (pos__ + 1);
                  }
                } 
              }
            } 
          }
        } 
      }
      current_statement__ = 44;
      stan::math::validate_non_negative_index("idx_background_zero",
                                              "N_intervals", N_intervals);
      current_statement__ = 45;
      stan::math::validate_non_negative_index("idx_background_zero",
                                              "max(N_dets)", lcm_sym178__);
      current_statement__ = 46;
      stan::math::validate_non_negative_index("idx_background_zero",
                                              "max_n_chan", max_n_chan);
      current_statement__ = 47;
      context__.validate_dims("data initialization","idx_background_zero",
          "int",
           std::vector<size_t>{static_cast<size_t>(N_intervals),
            static_cast<size_t>(lcm_sym178__),
            static_cast<size_t>(max_n_chan)});
      idx_background_zero = 
        std::vector<std::vector<std::vector<int>>>(N_intervals, 
          std::vector<std::vector<int>>(lcm_sym178__, 
            std::vector<int>(max_n_chan, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> idx_background_zero_flat__;
        current_statement__ = 47;
        idx_background_zero_flat__ = context__.vals_i("idx_background_zero");
        current_statement__ = 47;
        pos__ = 1;
        current_statement__ = 47;
        if (lcm_sym164__) {
          current_statement__ = 47;
          if (lcm_sym166__) {
            current_statement__ = 47;
            if (lcm_sym163__) {
              current_statement__ = 47;
              stan::model::assign(idx_background_zero,
                stan::model::rvalue(idx_background_zero_flat__,
                  "idx_background_zero_flat__", stan::model::index_uni(1)),
                "assigning variable idx_background_zero", stan::model::index_uni(1),
                                                            stan::model::index_uni(1),
                                                            stan::model::index_uni(1));
              current_statement__ = 47;
              pos__ = 2;
              for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                current_statement__ = 47;
                stan::model::assign(idx_background_zero,
                  idx_background_zero_flat__[(pos__ - 1)],
                  "assigning variable idx_background_zero", stan::model::index_uni(sym3__),
                                                              stan::model::index_uni(1),
                                                              stan::model::index_uni(1));
                current_statement__ = 47;
                pos__ = (pos__ + 1);
              }
            } 
            for (int sym2__ = 2; sym2__ <= lcm_sym178__; ++sym2__) {
              current_statement__ = 47;
              if (lcm_sym163__) {
                current_statement__ = 47;
                stan::model::assign(idx_background_zero,
                  idx_background_zero_flat__[(pos__ - 1)],
                  "assigning variable idx_background_zero", stan::model::index_uni(1),
                                                              stan::model::index_uni(sym2__),
                                                              stan::model::index_uni(1));
                current_statement__ = 47;
                pos__ = (pos__ + 1);
                for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                  current_statement__ = 47;
                  stan::model::assign(idx_background_zero,
                    idx_background_zero_flat__[(pos__ - 1)],
                    "assigning variable idx_background_zero", stan::model::index_uni(sym3__),
                                                                stan::model::index_uni(sym2__),
                                                                stan::model::index_uni(1));
                  current_statement__ = 47;
                  pos__ = (pos__ + 1);
                }
              } 
            }
          } 
          for (int sym1__ = 2; sym1__ <= max_n_chan; ++sym1__) {
            current_statement__ = 47;
            if (lcm_sym166__) {
              current_statement__ = 47;
              if (lcm_sym163__) {
                current_statement__ = 47;
                stan::model::assign(idx_background_zero,
                  idx_background_zero_flat__[(pos__ - 1)],
                  "assigning variable idx_background_zero", stan::model::index_uni(1),
                                                              stan::model::index_uni(1),
                                                              stan::model::index_uni(sym1__));
                current_statement__ = 47;
                pos__ = (pos__ + 1);
                for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                  current_statement__ = 47;
                  stan::model::assign(idx_background_zero,
                    idx_background_zero_flat__[(pos__ - 1)],
                    "assigning variable idx_background_zero", stan::model::index_uni(sym3__),
                                                                stan::model::index_uni(1),
                                                                stan::model::index_uni(sym1__));
                  current_statement__ = 47;
                  pos__ = (pos__ + 1);
                }
              } 
              for (int sym2__ = 2; sym2__ <= lcm_sym178__; ++sym2__) {
                current_statement__ = 47;
                if (lcm_sym163__) {
                  current_statement__ = 47;
                  stan::model::assign(idx_background_zero,
                    idx_background_zero_flat__[(pos__ - 1)],
                    "assigning variable idx_background_zero", stan::model::index_uni(1),
                                                                stan::model::index_uni(sym2__),
                                                                stan::model::index_uni(sym1__));
                  current_statement__ = 47;
                  pos__ = (pos__ + 1);
                  for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                    current_statement__ = 47;
                    stan::model::assign(idx_background_zero,
                      idx_background_zero_flat__[(pos__ - 1)],
                      "assigning variable idx_background_zero", stan::model::index_uni(sym3__),
                                                                  stan::model::index_uni(sym2__),
                                                                  stan::model::index_uni(sym1__));
                    current_statement__ = 47;
                    pos__ = (pos__ + 1);
                  }
                } 
              }
            } 
          }
        } 
      }
      current_statement__ = 48;
      stan::math::validate_non_negative_index("idx_background_nonzero",
                                              "N_intervals", N_intervals);
      current_statement__ = 49;
      stan::math::validate_non_negative_index("idx_background_nonzero",
                                              "max(N_dets)", lcm_sym178__);
      current_statement__ = 50;
      stan::math::validate_non_negative_index("idx_background_nonzero",
                                              "max_n_chan", max_n_chan);
      current_statement__ = 51;
      context__.validate_dims("data initialization","idx_background_nonzero",
          "int",
           std::vector<size_t>{static_cast<size_t>(N_intervals),
            static_cast<size_t>(lcm_sym178__),
            static_cast<size_t>(max_n_chan)});
      idx_background_nonzero = 
        std::vector<std::vector<std::vector<int>>>(N_intervals, 
          std::vector<std::vector<int>>(lcm_sym178__, 
            std::vector<int>(max_n_chan, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> idx_background_nonzero_flat__;
        current_statement__ = 51;
        idx_background_nonzero_flat__ = context__.vals_i("idx_background_nonzero");
        current_statement__ = 51;
        pos__ = 1;
        current_statement__ = 51;
        if (lcm_sym164__) {
          current_statement__ = 51;
          if (lcm_sym166__) {
            current_statement__ = 51;
            if (lcm_sym163__) {
              current_statement__ = 51;
              stan::model::assign(idx_background_nonzero,
                stan::model::rvalue(idx_background_nonzero_flat__,
                  "idx_background_nonzero_flat__", stan::model::index_uni(1)),
                "assigning variable idx_background_nonzero", stan::model::index_uni(1),
                                                               stan::model::index_uni(1),
                                                               stan::model::index_uni(1));
              current_statement__ = 51;
              pos__ = 2;
              for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                current_statement__ = 51;
                stan::model::assign(idx_background_nonzero,
                  idx_background_nonzero_flat__[(pos__ - 1)],
                  "assigning variable idx_background_nonzero", stan::model::index_uni(sym3__),
                                                                 stan::model::index_uni(1),
                                                                 stan::model::index_uni(1));
                current_statement__ = 51;
                pos__ = (pos__ + 1);
              }
            } 
            for (int sym2__ = 2; sym2__ <= lcm_sym178__; ++sym2__) {
              current_statement__ = 51;
              if (lcm_sym163__) {
                current_statement__ = 51;
                stan::model::assign(idx_background_nonzero,
                  idx_background_nonzero_flat__[(pos__ - 1)],
                  "assigning variable idx_background_nonzero", stan::model::index_uni(1),
                                                                 stan::model::index_uni(sym2__),
                                                                 stan::model::index_uni(1));
                current_statement__ = 51;
                pos__ = (pos__ + 1);
                for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                  current_statement__ = 51;
                  stan::model::assign(idx_background_nonzero,
                    idx_background_nonzero_flat__[(pos__ - 1)],
                    "assigning variable idx_background_nonzero", stan::model::index_uni(sym3__),
                                                                   stan::model::index_uni(sym2__),
                                                                   stan::model::index_uni(1));
                  current_statement__ = 51;
                  pos__ = (pos__ + 1);
                }
              } 
            }
          } 
          for (int sym1__ = 2; sym1__ <= max_n_chan; ++sym1__) {
            current_statement__ = 51;
            if (lcm_sym166__) {
              current_statement__ = 51;
              if (lcm_sym163__) {
                current_statement__ = 51;
                stan::model::assign(idx_background_nonzero,
                  idx_background_nonzero_flat__[(pos__ - 1)],
                  "assigning variable idx_background_nonzero", stan::model::index_uni(1),
                                                                 stan::model::index_uni(1),
                                                                 stan::model::index_uni(sym1__));
                current_statement__ = 51;
                pos__ = (pos__ + 1);
                for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                  current_statement__ = 51;
                  stan::model::assign(idx_background_nonzero,
                    idx_background_nonzero_flat__[(pos__ - 1)],
                    "assigning variable idx_background_nonzero", stan::model::index_uni(sym3__),
                                                                   stan::model::index_uni(1),
                                                                   stan::model::index_uni(sym1__));
                  current_statement__ = 51;
                  pos__ = (pos__ + 1);
                }
              } 
              for (int sym2__ = 2; sym2__ <= lcm_sym178__; ++sym2__) {
                current_statement__ = 51;
                if (lcm_sym163__) {
                  current_statement__ = 51;
                  stan::model::assign(idx_background_nonzero,
                    idx_background_nonzero_flat__[(pos__ - 1)],
                    "assigning variable idx_background_nonzero", stan::model::index_uni(1),
                                                                   stan::model::index_uni(sym2__),
                                                                   stan::model::index_uni(sym1__));
                  current_statement__ = 51;
                  pos__ = (pos__ + 1);
                  for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                    current_statement__ = 51;
                    stan::model::assign(idx_background_nonzero,
                      idx_background_nonzero_flat__[(pos__ - 1)],
                      "assigning variable idx_background_nonzero", stan::model::index_uni(sym3__),
                                                                    stan::model::index_uni(sym2__),
                                                                    stan::model::index_uni(sym1__));
                    current_statement__ = 51;
                    pos__ = (pos__ + 1);
                  }
                } 
              }
            } 
          }
        } 
      }
      current_statement__ = 52;
      stan::math::validate_non_negative_index("N_bkg_zero", "N_intervals",
                                              N_intervals);
      current_statement__ = 53;
      stan::math::validate_non_negative_index("N_bkg_zero", "max(N_dets)",
                                              lcm_sym178__);
      current_statement__ = 54;
      context__.validate_dims("data initialization","N_bkg_zero","int",
           std::vector<size_t>{static_cast<size_t>(N_intervals),
            static_cast<size_t>(lcm_sym178__)});
      N_bkg_zero = 
        std::vector<std::vector<int>>(N_intervals, 
          std::vector<int>(lcm_sym178__, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> N_bkg_zero_flat__;
        current_statement__ = 54;
        N_bkg_zero_flat__ = context__.vals_i("N_bkg_zero");
        current_statement__ = 54;
        pos__ = 1;
        current_statement__ = 54;
        if (lcm_sym166__) {
          current_statement__ = 54;
          if (lcm_sym163__) {
            current_statement__ = 54;
            stan::model::assign(N_bkg_zero,
              stan::model::rvalue(N_bkg_zero_flat__, "N_bkg_zero_flat__",
                stan::model::index_uni(1)),
              "assigning variable N_bkg_zero", stan::model::index_uni(1),
                                                 stan::model::index_uni(1));
            current_statement__ = 54;
            pos__ = 2;
            for (int sym2__ = 2; sym2__ <= N_intervals; ++sym2__) {
              current_statement__ = 54;
              stan::model::assign(N_bkg_zero, N_bkg_zero_flat__[(pos__ - 1)],
                "assigning variable N_bkg_zero", stan::model::index_uni(sym2__),
                                                   stan::model::index_uni(1));
              current_statement__ = 54;
              pos__ = (pos__ + 1);
            }
          } 
          for (int sym1__ = 2; sym1__ <= lcm_sym178__; ++sym1__) {
            current_statement__ = 54;
            if (lcm_sym163__) {
              current_statement__ = 54;
              stan::model::assign(N_bkg_zero, N_bkg_zero_flat__[(pos__ - 1)],
                "assigning variable N_bkg_zero", stan::model::index_uni(1),
                                                   stan::model::index_uni(sym1__));
              current_statement__ = 54;
              pos__ = (pos__ + 1);
              for (int sym2__ = 2; sym2__ <= N_intervals; ++sym2__) {
                current_statement__ = 54;
                stan::model::assign(N_bkg_zero,
                  N_bkg_zero_flat__[(pos__ - 1)],
                  "assigning variable N_bkg_zero", stan::model::index_uni(sym2__),
                                                     stan::model::index_uni(sym1__));
                current_statement__ = 54;
                pos__ = (pos__ + 1);
              }
            } 
          }
        } 
      }
      current_statement__ = 55;
      stan::math::validate_non_negative_index("N_bkg_nonzero", "N_intervals",
                                              N_intervals);
      current_statement__ = 56;
      stan::math::validate_non_negative_index("N_bkg_nonzero", "max(N_dets)",
                                              lcm_sym178__);
      current_statement__ = 57;
      context__.validate_dims("data initialization","N_bkg_nonzero","int",
           std::vector<size_t>{static_cast<size_t>(N_intervals),
            static_cast<size_t>(lcm_sym178__)});
      N_bkg_nonzero = 
        std::vector<std::vector<int>>(N_intervals, 
          std::vector<int>(lcm_sym178__, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> N_bkg_nonzero_flat__;
        current_statement__ = 57;
        N_bkg_nonzero_flat__ = context__.vals_i("N_bkg_nonzero");
        current_statement__ = 57;
        pos__ = 1;
        current_statement__ = 57;
        if (lcm_sym166__) {
          current_statement__ = 57;
          if (lcm_sym163__) {
            current_statement__ = 57;
            stan::model::assign(N_bkg_nonzero,
              stan::model::rvalue(N_bkg_nonzero_flat__,
                "N_bkg_nonzero_flat__", stan::model::index_uni(1)),
              "assigning variable N_bkg_nonzero", stan::model::index_uni(1),
                                                    stan::model::index_uni(1));
            current_statement__ = 57;
            pos__ = 2;
            for (int sym2__ = 2; sym2__ <= N_intervals; ++sym2__) {
              current_statement__ = 57;
              stan::model::assign(N_bkg_nonzero,
                N_bkg_nonzero_flat__[(pos__ - 1)],
                "assigning variable N_bkg_nonzero", stan::model::index_uni(sym2__),
                                                      stan::model::index_uni(1));
              current_statement__ = 57;
              pos__ = (pos__ + 1);
            }
          } 
          for (int sym1__ = 2; sym1__ <= lcm_sym178__; ++sym1__) {
            current_statement__ = 57;
            if (lcm_sym163__) {
              current_statement__ = 57;
              stan::model::assign(N_bkg_nonzero,
                N_bkg_nonzero_flat__[(pos__ - 1)],
                "assigning variable N_bkg_nonzero", stan::model::index_uni(1),
                                                      stan::model::index_uni(sym1__));
              current_statement__ = 57;
              pos__ = (pos__ + 1);
              for (int sym2__ = 2; sym2__ <= N_intervals; ++sym2__) {
                current_statement__ = 57;
                stan::model::assign(N_bkg_nonzero,
                  N_bkg_nonzero_flat__[(pos__ - 1)],
                  "assigning variable N_bkg_nonzero", stan::model::index_uni(sym2__),
                                                        stan::model::index_uni(sym1__));
                current_statement__ = 57;
                pos__ = (pos__ + 1);
              }
            } 
          }
        } 
      }
      current_statement__ = 58;
      stan::math::validate_non_negative_index("exposure", "N_intervals",
                                              N_intervals);
      current_statement__ = 59;
      stan::math::validate_non_negative_index("exposure", "max(N_dets)",
                                              lcm_sym178__);
      current_statement__ = 60;
      context__.validate_dims("data initialization","exposure","double",
           std::vector<size_t>{static_cast<size_t>(N_intervals),
            static_cast<size_t>(lcm_sym178__)});
      exposure = 
        std::vector<std::vector<double>>(N_intervals, 
          std::vector<double>(lcm_sym178__, 
            std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<double> exposure_flat__;
        current_statement__ = 60;
        exposure_flat__ = context__.vals_r("exposure");
        current_statement__ = 60;
        pos__ = 1;
        current_statement__ = 60;
        if (lcm_sym166__) {
          current_statement__ = 60;
          if (lcm_sym163__) {
            current_statement__ = 60;
            stan::model::assign(exposure,
              stan::model::rvalue(exposure_flat__, "exposure_flat__",
                stan::model::index_uni(1)),
              "assigning variable exposure", stan::model::index_uni(1),
                                               stan::model::index_uni(1));
            current_statement__ = 60;
            pos__ = 2;
            for (int sym2__ = 2; sym2__ <= N_intervals; ++sym2__) {
              current_statement__ = 60;
              stan::model::assign(exposure, exposure_flat__[(pos__ - 1)],
                "assigning variable exposure", stan::model::index_uni(sym2__),
                                                 stan::model::index_uni(1));
              current_statement__ = 60;
              pos__ = (pos__ + 1);
            }
          } 
          for (int sym1__ = 2; sym1__ <= lcm_sym178__; ++sym1__) {
            current_statement__ = 60;
            if (lcm_sym163__) {
              current_statement__ = 60;
              stan::model::assign(exposure, exposure_flat__[(pos__ - 1)],
                "assigning variable exposure", stan::model::index_uni(1),
                                                 stan::model::index_uni(sym1__));
              current_statement__ = 60;
              pos__ = (pos__ + 1);
              for (int sym2__ = 2; sym2__ <= N_intervals; ++sym2__) {
                current_statement__ = 60;
                stan::model::assign(exposure, exposure_flat__[(pos__ - 1)],
                  "assigning variable exposure", stan::model::index_uni(sym2__),
                                                   stan::model::index_uni(sym1__));
                current_statement__ = 60;
                pos__ = (pos__ + 1);
              }
            } 
          }
        } 
      }
      current_statement__ = 61;
      stan::math::validate_non_negative_index("response", "N_intervals",
                                              N_intervals);
      current_statement__ = 62;
      stan::math::validate_non_negative_index("response", "max(N_dets)",
                                              lcm_sym178__);
      current_statement__ = 63;
      stan::math::validate_non_negative_index("response", "max_n_chan",
                                              max_n_chan);
      current_statement__ = 64;
      stan::math::validate_non_negative_index("response", "max_n_echan",
                                              max_n_echan);
      current_statement__ = 65;
      context__.validate_dims("data initialization","response","double",
           std::vector<size_t>{static_cast<size_t>(N_intervals),
            static_cast<size_t>(lcm_sym178__),
            static_cast<size_t>(max_n_chan),
            static_cast<size_t>(max_n_echan)});
      response = 
        std::vector<std::vector<Eigen::Matrix<double, -1, -1>>>(N_intervals, 
          std::vector<Eigen::Matrix<double, -1, -1>>(lcm_sym178__, 
            Eigen::Matrix<double, -1, -1>::Constant(max_n_chan, max_n_echan,
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<double> response_flat__;
        current_statement__ = 65;
        response_flat__ = context__.vals_r("response");
        current_statement__ = 65;
        pos__ = 1;
        current_statement__ = 65;
        if (lcm_sym165__) {
          current_statement__ = 65;
          if (lcm_sym164__) {
            current_statement__ = 65;
            if (lcm_sym166__) {
              current_statement__ = 65;
              if (lcm_sym163__) {
                current_statement__ = 65;
                stan::model::assign(response,
                  stan::model::rvalue(response_flat__, "response_flat__",
                    stan::model::index_uni(1)),
                  "assigning variable response", stan::model::index_uni(1),
                                                   stan::model::index_uni(1),
                                                   stan::model::index_uni(1),
                                                   stan::model::index_uni(1));
                current_statement__ = 65;
                pos__ = 2;
                for (int sym4__ = 2; sym4__ <= N_intervals; ++sym4__) {
                  current_statement__ = 65;
                  stan::model::assign(response, response_flat__[(pos__ - 1)],
                    "assigning variable response", stan::model::index_uni(sym4__),
                                                     stan::model::index_uni(1),
                                                     stan::model::index_uni(1),
                                                     stan::model::index_uni(1));
                  current_statement__ = 65;
                  pos__ = (pos__ + 1);
                }
              } 
              for (int sym3__ = 2; sym3__ <= lcm_sym178__; ++sym3__) {
                current_statement__ = 65;
                if (lcm_sym163__) {
                  current_statement__ = 65;
                  stan::model::assign(response, response_flat__[(pos__ - 1)],
                    "assigning variable response", stan::model::index_uni(1),
                                                     stan::model::index_uni(sym3__),
                                                     stan::model::index_uni(1),
                                                     stan::model::index_uni(1));
                  current_statement__ = 65;
                  pos__ = (pos__ + 1);
                  for (int sym4__ = 2; sym4__ <= N_intervals; ++sym4__) {
                    current_statement__ = 65;
                    stan::model::assign(response,
                      response_flat__[(pos__ - 1)],
                      "assigning variable response", stan::model::index_uni(sym4__),
                                                       stan::model::index_uni(sym3__),
                                                       stan::model::index_uni(1),
                                                       stan::model::index_uni(1));
                    current_statement__ = 65;
                    pos__ = (pos__ + 1);
                  }
                } 
              }
            } 
            for (int sym2__ = 2; sym2__ <= max_n_chan; ++sym2__) {
              current_statement__ = 65;
              if (lcm_sym166__) {
                current_statement__ = 65;
                if (lcm_sym163__) {
                  current_statement__ = 65;
                  stan::model::assign(response, response_flat__[(pos__ - 1)],
                    "assigning variable response", stan::model::index_uni(1),
                                                     stan::model::index_uni(1),
                                                     stan::model::index_uni(sym2__),
                                                     stan::model::index_uni(1));
                  current_statement__ = 65;
                  pos__ = (pos__ + 1);
                  for (int sym4__ = 2; sym4__ <= N_intervals; ++sym4__) {
                    current_statement__ = 65;
                    stan::model::assign(response,
                      response_flat__[(pos__ - 1)],
                      "assigning variable response", stan::model::index_uni(sym4__),
                                                       stan::model::index_uni(1),
                                                       stan::model::index_uni(sym2__),
                                                       stan::model::index_uni(1));
                    current_statement__ = 65;
                    pos__ = (pos__ + 1);
                  }
                } 
                for (int sym3__ = 2; sym3__ <= lcm_sym178__; ++sym3__) {
                  current_statement__ = 65;
                  if (lcm_sym163__) {
                    current_statement__ = 65;
                    stan::model::assign(response,
                      response_flat__[(pos__ - 1)],
                      "assigning variable response", stan::model::index_uni(1),
                                                       stan::model::index_uni(sym3__),
                                                       stan::model::index_uni(sym2__),
                                                       stan::model::index_uni(1));
                    current_statement__ = 65;
                    pos__ = (pos__ + 1);
                    for (int sym4__ = 2; sym4__ <= N_intervals; ++sym4__) {
                      current_statement__ = 65;
                      stan::model::assign(response,
                        response_flat__[(pos__ - 1)],
                        "assigning variable response", stan::model::index_uni(sym4__),
                                                         stan::model::index_uni(sym3__),
                                                         stan::model::index_uni(sym2__),
                                                         stan::model::index_uni(1));
                      current_statement__ = 65;
                      pos__ = (pos__ + 1);
                    }
                  } 
                }
              } 
            }
          } 
          for (int sym1__ = 2; sym1__ <= max_n_echan; ++sym1__) {
            current_statement__ = 65;
            if (lcm_sym164__) {
              current_statement__ = 65;
              if (lcm_sym166__) {
                current_statement__ = 65;
                if (lcm_sym163__) {
                  current_statement__ = 65;
                  stan::model::assign(response, response_flat__[(pos__ - 1)],
                    "assigning variable response", stan::model::index_uni(1),
                                                     stan::model::index_uni(1),
                                                     stan::model::index_uni(1),
                                                     stan::model::index_uni(sym1__));
                  current_statement__ = 65;
                  pos__ = (pos__ + 1);
                  for (int sym4__ = 2; sym4__ <= N_intervals; ++sym4__) {
                    current_statement__ = 65;
                    stan::model::assign(response,
                      response_flat__[(pos__ - 1)],
                      "assigning variable response", stan::model::index_uni(sym4__),
                                                       stan::model::index_uni(1),
                                                       stan::model::index_uni(1),
                                                       stan::model::index_uni(sym1__));
                    current_statement__ = 65;
                    pos__ = (pos__ + 1);
                  }
                } 
                for (int sym3__ = 2; sym3__ <= lcm_sym178__; ++sym3__) {
                  current_statement__ = 65;
                  if (lcm_sym163__) {
                    current_statement__ = 65;
                    stan::model::assign(response,
                      response_flat__[(pos__ - 1)],
                      "assigning variable response", stan::model::index_uni(1),
                                                       stan::model::index_uni(sym3__),
                                                       stan::model::index_uni(1),
                                                       stan::model::index_uni(sym1__));
                    current_statement__ = 65;
                    pos__ = (pos__ + 1);
                    for (int sym4__ = 2; sym4__ <= N_intervals; ++sym4__) {
                      current_statement__ = 65;
                      stan::model::assign(response,
                        response_flat__[(pos__ - 1)],
                        "assigning variable response", stan::model::index_uni(sym4__),
                                                         stan::model::index_uni(sym3__),
                                                         stan::model::index_uni(1),
                                                         stan::model::index_uni(sym1__));
                      current_statement__ = 65;
                      pos__ = (pos__ + 1);
                    }
                  } 
                }
              } 
              for (int sym2__ = 2; sym2__ <= max_n_chan; ++sym2__) {
                current_statement__ = 65;
                if (lcm_sym166__) {
                  current_statement__ = 65;
                  if (lcm_sym163__) {
                    current_statement__ = 65;
                    stan::model::assign(response,
                      response_flat__[(pos__ - 1)],
                      "assigning variable response", stan::model::index_uni(1),
                                                       stan::model::index_uni(1),
                                                       stan::model::index_uni(sym2__),
                                                       stan::model::index_uni(sym1__));
                    current_statement__ = 65;
                    pos__ = (pos__ + 1);
                    for (int sym4__ = 2; sym4__ <= N_intervals; ++sym4__) {
                      current_statement__ = 65;
                      stan::model::assign(response,
                        response_flat__[(pos__ - 1)],
                        "assigning variable response", stan::model::index_uni(sym4__),
                                                         stan::model::index_uni(1),
                                                         stan::model::index_uni(sym2__),
                                                         stan::model::index_uni(sym1__));
                      current_statement__ = 65;
                      pos__ = (pos__ + 1);
                    }
                  } 
                  for (int sym3__ = 2; sym3__ <= lcm_sym178__; ++sym3__) {
                    current_statement__ = 65;
                    if (lcm_sym163__) {
                      current_statement__ = 65;
                      stan::model::assign(response,
                        response_flat__[(pos__ - 1)],
                        "assigning variable response", stan::model::index_uni(1),
                                                         stan::model::index_uni(sym3__),
                                                         stan::model::index_uni(sym2__),
                                                         stan::model::index_uni(sym1__));
                      current_statement__ = 65;
                      pos__ = (pos__ + 1);
                      for (int sym4__ = 2; sym4__ <= N_intervals; ++sym4__) {
                        current_statement__ = 65;
                        stan::model::assign(response,
                          response_flat__[(pos__ - 1)],
                          "assigning variable response", stan::model::index_uni(sym4__),
                                                           stan::model::index_uni(sym3__),
                                                           stan::model::index_uni(sym2__),
                                                           stan::model::index_uni(sym1__));
                        current_statement__ = 65;
                        pos__ = (pos__ + 1);
                      }
                    } 
                  }
                } 
              }
            } 
          }
        } 
      }
      current_statement__ = 66;
      stan::math::validate_non_negative_index("mask", "N_intervals",
                                              N_intervals);
      current_statement__ = 67;
      stan::math::validate_non_negative_index("mask", "max(N_dets)",
                                              lcm_sym178__);
      current_statement__ = 68;
      stan::math::validate_non_negative_index("mask", "max_n_chan",
                                              max_n_chan);
      current_statement__ = 69;
      context__.validate_dims("data initialization","mask","int",
           std::vector<size_t>{static_cast<size_t>(N_intervals),
            static_cast<size_t>(lcm_sym178__),
            static_cast<size_t>(max_n_chan)});
      mask = 
        std::vector<std::vector<std::vector<int>>>(N_intervals, 
          std::vector<std::vector<int>>(lcm_sym178__, 
            std::vector<int>(max_n_chan, std::numeric_limits<int>::min())));
      
      
      {
        std::vector<int> mask_flat__;
        current_statement__ = 69;
        mask_flat__ = context__.vals_i("mask");
        current_statement__ = 69;
        pos__ = 1;
        current_statement__ = 69;
        if (lcm_sym164__) {
          current_statement__ = 69;
          if (lcm_sym166__) {
            current_statement__ = 69;
            if (lcm_sym163__) {
              current_statement__ = 69;
              stan::model::assign(mask,
                stan::model::rvalue(mask_flat__, "mask_flat__",
                  stan::model::index_uni(1)),
                "assigning variable mask", stan::model::index_uni(1),
                                             stan::model::index_uni(1),
                                             stan::model::index_uni(1));
              current_statement__ = 69;
              pos__ = 2;
              for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                current_statement__ = 69;
                stan::model::assign(mask, mask_flat__[(pos__ - 1)],
                  "assigning variable mask", stan::model::index_uni(sym3__),
                                               stan::model::index_uni(1),
                                               stan::model::index_uni(1));
                current_statement__ = 69;
                pos__ = (pos__ + 1);
              }
            } 
            for (int sym2__ = 2; sym2__ <= lcm_sym178__; ++sym2__) {
              current_statement__ = 69;
              if (lcm_sym163__) {
                current_statement__ = 69;
                stan::model::assign(mask, mask_flat__[(pos__ - 1)],
                  "assigning variable mask", stan::model::index_uni(1),
                                               stan::model::index_uni(sym2__),
                                               stan::model::index_uni(1));
                current_statement__ = 69;
                pos__ = (pos__ + 1);
                for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                  current_statement__ = 69;
                  stan::model::assign(mask, mask_flat__[(pos__ - 1)],
                    "assigning variable mask", stan::model::index_uni(sym3__),
                                                 stan::model::index_uni(sym2__),
                                                 stan::model::index_uni(1));
                  current_statement__ = 69;
                  pos__ = (pos__ + 1);
                }
              } 
            }
          } 
          for (int sym1__ = 2; sym1__ <= max_n_chan; ++sym1__) {
            current_statement__ = 69;
            if (lcm_sym166__) {
              current_statement__ = 69;
              if (lcm_sym163__) {
                current_statement__ = 69;
                stan::model::assign(mask, mask_flat__[(pos__ - 1)],
                  "assigning variable mask", stan::model::index_uni(1),
                                               stan::model::index_uni(1),
                                               stan::model::index_uni(sym1__));
                current_statement__ = 69;
                pos__ = (pos__ + 1);
                for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                  current_statement__ = 69;
                  stan::model::assign(mask, mask_flat__[(pos__ - 1)],
                    "assigning variable mask", stan::model::index_uni(sym3__),
                                                 stan::model::index_uni(1),
                                                 stan::model::index_uni(sym1__));
                  current_statement__ = 69;
                  pos__ = (pos__ + 1);
                }
              } 
              for (int sym2__ = 2; sym2__ <= lcm_sym178__; ++sym2__) {
                current_statement__ = 69;
                if (lcm_sym163__) {
                  current_statement__ = 69;
                  stan::model::assign(mask, mask_flat__[(pos__ - 1)],
                    "assigning variable mask", stan::model::index_uni(1),
                                                 stan::model::index_uni(sym2__),
                                                 stan::model::index_uni(sym1__));
                  current_statement__ = 69;
                  pos__ = (pos__ + 1);
                  for (int sym3__ = 2; sym3__ <= N_intervals; ++sym3__) {
                    current_statement__ = 69;
                    stan::model::assign(mask, mask_flat__[(pos__ - 1)],
                      "assigning variable mask", stan::model::index_uni(sym3__),
                                                   stan::model::index_uni(sym2__),
                                                   stan::model::index_uni(sym1__));
                    current_statement__ = 69;
                    pos__ = (pos__ + 1);
                  }
                } 
              }
            } 
          }
        } 
      }
      current_statement__ = 70;
      stan::math::validate_non_negative_index("N_channels_used",
                                              "N_intervals", N_intervals);
      current_statement__ = 71;
      stan::math::validate_non_negative_index("N_channels_used",
                                              "max(N_dets)", lcm_sym178__);
      current_statement__ = 72;
      context__.validate_dims("data initialization","N_channels_used","int",
           std::vector<size_t>{static_cast<size_t>(N_intervals),
            static_cast<size_t>(lcm_sym178__)});
      N_channels_used = 
        std::vector<std::vector<int>>(N_intervals, 
          std::vector<int>(lcm_sym178__, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> N_channels_used_flat__;
        current_statement__ = 72;
        N_channels_used_flat__ = context__.vals_i("N_channels_used");
        current_statement__ = 72;
        pos__ = 1;
        current_statement__ = 72;
        if (lcm_sym166__) {
          current_statement__ = 72;
          if (lcm_sym163__) {
            current_statement__ = 72;
            stan::model::assign(N_channels_used,
              stan::model::rvalue(N_channels_used_flat__,
                "N_channels_used_flat__", stan::model::index_uni(1)),
              "assigning variable N_channels_used", stan::model::index_uni(1),
                                                      stan::model::index_uni(1));
            current_statement__ = 72;
            pos__ = 2;
            for (int sym2__ = 2; sym2__ <= N_intervals; ++sym2__) {
              current_statement__ = 72;
              stan::model::assign(N_channels_used,
                N_channels_used_flat__[(pos__ - 1)],
                "assigning variable N_channels_used", stan::model::index_uni(sym2__),
                                                        stan::model::index_uni(1));
              current_statement__ = 72;
              pos__ = (pos__ + 1);
            }
          } 
          for (int sym1__ = 2; sym1__ <= lcm_sym178__; ++sym1__) {
            current_statement__ = 72;
            if (lcm_sym163__) {
              current_statement__ = 72;
              stan::model::assign(N_channels_used,
                N_channels_used_flat__[(pos__ - 1)],
                "assigning variable N_channels_used", stan::model::index_uni(1),
                                                        stan::model::index_uni(sym1__));
              current_statement__ = 72;
              pos__ = (pos__ + 1);
              for (int sym2__ = 2; sym2__ <= N_intervals; ++sym2__) {
                current_statement__ = 72;
                stan::model::assign(N_channels_used,
                  N_channels_used_flat__[(pos__ - 1)],
                  "assigning variable N_channels_used", stan::model::index_uni(sym2__),
                                                          stan::model::index_uni(sym1__));
                current_statement__ = 72;
                pos__ = (pos__ + 1);
              }
            } 
          }
        } 
      }
      current_statement__ = 73;
      stan::math::validate_non_negative_index("dl", "N_intervals",
                                              N_intervals);
      current_statement__ = 74;
      context__.validate_dims("data initialization","dl","double",
           std::vector<size_t>{static_cast<size_t>(N_intervals)});
      dl_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N_intervals,
          std::numeric_limits<double>::quiet_NaN());
      new (&dl) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dl_data__.data(), N_intervals);
        
      
      {
        std::vector<double> dl_flat__;
        current_statement__ = 74;
        dl_flat__ = context__.vals_r("dl");
        current_statement__ = 74;
        pos__ = 1;
        current_statement__ = 74;
        if (lcm_sym163__) {
          current_statement__ = 74;
          stan::model::assign(dl,
            stan::model::rvalue(dl_flat__, "dl_flat__",
              stan::model::index_uni(1)),
            "assigning variable dl", stan::model::index_uni(1));
          current_statement__ = 74;
          pos__ = 2;
          for (int sym1__ = 2; sym1__ <= N_intervals; ++sym1__) {
            current_statement__ = 74;
            stan::model::assign(dl, dl_flat__[(pos__ - 1)],
              "assigning variable dl", stan::model::index_uni(sym1__));
            current_statement__ = 74;
            pos__ = (pos__ + 1);
          }
        } 
      }
      current_statement__ = 75;
      stan::math::validate_non_negative_index("z", "N_intervals", N_intervals);
      current_statement__ = 76;
      context__.validate_dims("data initialization","z","double",
           std::vector<size_t>{static_cast<size_t>(N_intervals)});
      z_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N_intervals,
          std::numeric_limits<double>::quiet_NaN());
      new (&z) Eigen::Map<Eigen::Matrix<double, -1, 1>>(z_data__.data(), N_intervals);
        
      
      {
        std::vector<double> z_flat__;
        current_statement__ = 76;
        z_flat__ = context__.vals_r("z");
        current_statement__ = 76;
        pos__ = 1;
        current_statement__ = 76;
        if (lcm_sym163__) {
          current_statement__ = 76;
          stan::model::assign(z,
            stan::model::rvalue(z_flat__, "z_flat__",
              stan::model::index_uni(1)),
            "assigning variable z", stan::model::index_uni(1));
          current_statement__ = 76;
          pos__ = 2;
          for (int sym1__ = 2; sym1__ <= N_intervals; ++sym1__) {
            current_statement__ = 76;
            stan::model::assign(z, z_flat__[(pos__ - 1)],
              "assigning variable z", stan::model::index_uni(sym1__));
            current_statement__ = 76;
            pos__ = (pos__ + 1);
          }
        } 
      }
      current_statement__ = 77;
      x_r = std::vector<double>(0, std::numeric_limits<double>::quiet_NaN());
      
      
      current_statement__ = 78;
      x_i = std::vector<int>(0, std::numeric_limits<int>::min());
      
      
      current_statement__ = 79;
      kev2erg = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 79;
      kev2erg = 1.6021766e-9;
      current_statement__ = 80;
      erg2kev = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 80;
      erg2kev = 6.24151e8;
      current_statement__ = 81;
      stan::math::validate_non_negative_index("dl2", "N_intervals",
                                              N_intervals);
      current_statement__ = 82;
      dl2_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N_intervals,
          std::numeric_limits<double>::quiet_NaN());
      new (&dl2) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dl2_data__.data(), N_intervals);
        
      
      current_statement__ = 82;
      stan::model::assign(dl2, stan::math::square(dl),
        "assigning variable dl2");
      current_statement__ = 83;
      N_total_channels = std::numeric_limits<int>::min();
      
      
      current_statement__ = 83;
      N_total_channels = 0;
      current_statement__ = 84;
      emin = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 84;
      emin = 10.;
      current_statement__ = 85;
      emax = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 85;
      emax = 1E4;
      current_statement__ = 86;
      stan::math::validate_non_negative_index("ebounds_add", "N_intervals",
                                              N_intervals);
      current_statement__ = 87;
      stan::math::validate_non_negative_index("ebounds_add", "max(N_dets)",
                                              lcm_sym178__);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("ebounds_add", "max_n_echan",
                                              max_n_echan);
      current_statement__ = 89;
      ebounds_add = 
        std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(N_intervals, 
          std::vector<Eigen::Matrix<double, -1, 1>>(lcm_sym178__, 
            Eigen::Matrix<double, -1, 1>::Constant(max_n_echan,
              std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 90;
      stan::math::validate_non_negative_index("ebounds_half", "N_intervals",
                                              N_intervals);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("ebounds_half", "max(N_dets)",
                                              lcm_sym178__);
      current_statement__ = 92;
      stan::math::validate_non_negative_index("ebounds_half", "max_n_echan",
                                              max_n_echan);
      current_statement__ = 93;
      ebounds_half = 
        std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(N_intervals, 
          std::vector<Eigen::Matrix<double, -1, 1>>(stan::math::max(N_dets), 
            Eigen::Matrix<double, -1, 1>::Constant(max_n_echan,
              std::numeric_limits<double>::quiet_NaN())));
      
      
      current_statement__ = 94;
      stan::math::validate_non_negative_index("all_N", "N_intervals",
                                              N_intervals);
      current_statement__ = 95;
      all_N = std::vector<int>(N_intervals, std::numeric_limits<int>::min());
      
      
      current_statement__ = 101;
      if (lcm_sym163__) {
        current_statement__ = 96;
        stan::model::assign(all_N, 1,
          "assigning variable all_N", stan::model::index_uni(1));
        lcm_sym189__ = stan::model::rvalue(N_dets, "N_dets",
                         stan::model::index_uni(1));
        if (stan::math::logical_gte(lcm_sym189__, 1)) {
          lcm_sym193__ = stan::model::rvalue(N_echan, "N_echan",
                           stan::model::index_uni(1),
                             stan::model::index_uni(1));
          stan::model::assign(ebounds_half,
            stan::math::multiply(0.5,
              stan::math::add(
                stan::model::rvalue(ebounds_hi, "ebounds_hi",
                  stan::model::index_uni(1), stan::model::index_uni(1),
                    stan::model::index_min_max(1, lcm_sym193__)),
                stan::model::rvalue(ebounds_lo, "ebounds_lo",
                  stan::model::index_uni(1), stan::model::index_uni(1),
                    stan::model::index_min_max(1, lcm_sym193__)))),
            "assigning variable ebounds_half", stan::model::index_uni(1),
                                                 stan::model::index_uni(1),
                                                 stan::model::index_min_max(1, lcm_sym193__));
          current_statement__ = 97;
          stan::model::assign(ebounds_add,
            stan::math::divide(
              stan::math::subtract(
                stan::model::rvalue(ebounds_hi, "ebounds_hi",
                  stan::model::index_uni(1), stan::model::index_uni(1),
                    stan::model::index_min_max(1, lcm_sym193__)),
                stan::model::rvalue(ebounds_lo, "ebounds_lo",
                  stan::model::index_uni(1), stan::model::index_uni(1),
                    stan::model::index_min_max(1, lcm_sym193__))), 6.0),
            "assigning variable ebounds_add", stan::model::index_uni(1),
                                                stan::model::index_uni(1),
                                                stan::model::index_min_max(1, lcm_sym193__));
          current_statement__ = 98;
          N_total_channels = (0 +
                               stan::model::rvalue(N_channels_used,
                                 "N_channels_used",
                                 stan::model::index_uni(1),
                                   stan::model::index_uni(1)));
          for (int m = 2; m <= lcm_sym189__; ++m) {
            lcm_sym192__ = stan::model::rvalue(N_echan, "N_echan",
                             stan::model::index_uni(1),
                               stan::model::index_uni(m));
            stan::model::assign(ebounds_half,
              stan::math::multiply(0.5,
                stan::math::add(
                  stan::model::rvalue(ebounds_hi, "ebounds_hi",
                    stan::model::index_uni(1), stan::model::index_uni(m),
                      stan::model::index_min_max(1, lcm_sym192__)),
                  stan::model::rvalue(ebounds_lo, "ebounds_lo",
                    stan::model::index_uni(1), stan::model::index_uni(m),
                      stan::model::index_min_max(1, lcm_sym192__)))),
              "assigning variable ebounds_half", stan::model::index_uni(1),
                                                   stan::model::index_uni(m),
                                                   stan::model::index_min_max(1, lcm_sym192__));
            current_statement__ = 97;
            stan::model::assign(ebounds_add,
              stan::math::divide(
                stan::math::subtract(
                  stan::model::rvalue(ebounds_hi, "ebounds_hi",
                    stan::model::index_uni(1), stan::model::index_uni(m),
                      stan::model::index_min_max(1, lcm_sym192__)),
                  stan::model::rvalue(ebounds_lo, "ebounds_lo",
                    stan::model::index_uni(1), stan::model::index_uni(m),
                      stan::model::index_min_max(1, lcm_sym192__))), 6.0),
              "assigning variable ebounds_add", stan::model::index_uni(1),
                                                  stan::model::index_uni(m),
                                                  stan::model::index_min_max(1, lcm_sym192__));
            current_statement__ = 98;
            N_total_channels = (N_total_channels +
                                 stan::model::rvalue(N_channels_used,
                                   "N_channels_used",
                                   stan::model::index_uni(1),
                                     stan::model::index_uni(m)));
          }
        } 
        for (int n = 2; n <= N_intervals; ++n) {
          current_statement__ = 96;
          stan::model::assign(all_N, n,
            "assigning variable all_N", stan::model::index_uni(n));
          lcm_sym188__ = stan::model::rvalue(N_dets, "N_dets",
                           stan::model::index_uni(n));
          if (stan::math::logical_gte(lcm_sym188__, 1)) {
            lcm_sym191__ = stan::model::rvalue(N_echan, "N_echan",
                             stan::model::index_uni(n),
                               stan::model::index_uni(1));
            stan::model::assign(ebounds_half,
              stan::math::multiply(0.5,
                stan::math::add(
                  stan::model::rvalue(ebounds_hi, "ebounds_hi",
                    stan::model::index_uni(n), stan::model::index_uni(1),
                      stan::model::index_min_max(1, lcm_sym191__)),
                  stan::model::rvalue(ebounds_lo, "ebounds_lo",
                    stan::model::index_uni(n), stan::model::index_uni(1),
                      stan::model::index_min_max(1, lcm_sym191__)))),
              "assigning variable ebounds_half", stan::model::index_uni(n),
                                                   stan::model::index_uni(1),
                                                   stan::model::index_min_max(1, lcm_sym191__));
            current_statement__ = 97;
            stan::model::assign(ebounds_add,
              stan::math::divide(
                stan::math::subtract(
                  stan::model::rvalue(ebounds_hi, "ebounds_hi",
                    stan::model::index_uni(n), stan::model::index_uni(1),
                      stan::model::index_min_max(1, lcm_sym191__)),
                  stan::model::rvalue(ebounds_lo, "ebounds_lo",
                    stan::model::index_uni(n), stan::model::index_uni(1),
                      stan::model::index_min_max(1, lcm_sym191__))), 6.0),
              "assigning variable ebounds_add", stan::model::index_uni(n),
                                                  stan::model::index_uni(1),
                                                  stan::model::index_min_max(1, lcm_sym191__));
            current_statement__ = 98;
            N_total_channels = (N_total_channels +
                                 stan::model::rvalue(N_channels_used,
                                   "N_channels_used",
                                   stan::model::index_uni(n),
                                     stan::model::index_uni(1)));
            for (int m = 2; m <= lcm_sym188__; ++m) {
              lcm_sym190__ = stan::model::rvalue(N_echan, "N_echan",
                               stan::model::index_uni(n),
                                 stan::model::index_uni(m));
              stan::model::assign(ebounds_half,
                stan::math::multiply(0.5,
                  stan::math::add(
                    stan::model::rvalue(ebounds_hi, "ebounds_hi",
                      stan::model::index_uni(n), stan::model::index_uni(m),
                        stan::model::index_min_max(1, lcm_sym190__)),
                    stan::model::rvalue(ebounds_lo, "ebounds_lo",
                      stan::model::index_uni(n), stan::model::index_uni(m),
                        stan::model::index_min_max(1, lcm_sym190__)))),
                "assigning variable ebounds_half", stan::model::index_uni(n),
                                                     stan::model::index_uni(m),
                                                     stan::model::index_min_max(1, lcm_sym190__));
              current_statement__ = 97;
              stan::model::assign(ebounds_add,
                stan::math::divide(
                  stan::math::subtract(
                    stan::model::rvalue(ebounds_hi, "ebounds_hi",
                      stan::model::index_uni(n), stan::model::index_uni(m),
                        stan::model::index_min_max(1, lcm_sym190__)),
                    stan::model::rvalue(ebounds_lo, "ebounds_lo",
                      stan::model::index_uni(n), stan::model::index_uni(m),
                        stan::model::index_min_max(1, lcm_sym190__))), 6.0),
                "assigning variable ebounds_add", stan::model::index_uni(n),
                                                    stan::model::index_uni(m),
                                                    stan::model::index_min_max(1, lcm_sym190__));
              current_statement__ = 98;
              N_total_channels = (N_total_channels +
                                   stan::model::rvalue(N_channels_used,
                                     "N_channels_used",
                                     stan::model::index_uni(n),
                                       stan::model::index_uni(m)));
            }
          } 
        }
      } 
      current_statement__ = 102;
      stan::math::validate_non_negative_index("alpha", "N_intervals",
                                              N_intervals);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("log_ec", "N_intervals",
                                              N_intervals);
      current_statement__ = 104;
      stan::math::validate_non_negative_index("log_K", "N_intervals",
                                              N_intervals);
      current_statement__ = 105;
      stan::math::validate_non_negative_index("ec", "N_intervals",
                                              N_intervals);
      current_statement__ = 106;
      stan::math::validate_non_negative_index("K", "N_intervals", N_intervals);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = N_intervals + N_intervals + N_intervals;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "cpl_simple_chunked_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      double lcm_sym157__;
      Eigen::Matrix<local_scalar_t__, -1, 1> lcm_sym156__;
      Eigen::Matrix<local_scalar_t__, -1, 1> lcm_sym155__;
      double lcm_sym154__;
      double lcm_sym153__;
      double lcm_sym152__;
      int lcm_sym158__;
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha;
      current_statement__ = 1;
      alpha = in__.template read_constrain_lub<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(-10, 5,
                lp__, N_intervals);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_ec;
      current_statement__ = 2;
      log_ec = in__.template read_constrain_ub<
                 Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(6, lp__,
                 N_intervals);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_K;
      current_statement__ = 3;
      log_K = in__.template read_constrain_ub<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(5, lp__,
                N_intervals);
      Eigen::Matrix<local_scalar_t__, -1, 1> ec =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_intervals,
           DUMMY_VAR__);
      stan::model::assign(lcm_sym156__, stan::math::pow(10, log_ec),
        "assigning variable lcm_sym156__");
      stan::model::assign(ec, lcm_sym156__, "assigning variable ec");
      Eigen::Matrix<local_scalar_t__, -1, 1> K =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_intervals,
           DUMMY_VAR__);
      stan::model::assign(lcm_sym155__, stan::math::pow(10, log_K),
        "assigning variable lcm_sym155__");
      stan::model::assign(K, lcm_sym155__, "assigning variable K");
      {
        int grainsize = std::numeric_limits<int>::min();
        current_statement__ = 7;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(alpha, -1, .5));
        current_statement__ = 8;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(log_ec, 2., 2.));
        current_statement__ = 9;
        lp_accum__.add(stan::math::normal_lpdf<propto__>(log_K, -1, 1));
        current_statement__ = 10;
        lp_accum__.add(
          stan::math::reduce_sum<partial_log_like_rsfunctor__>(all_N, 1,
            pstream__, alpha, lcm_sym156__, lcm_sym155__, observed_counts,
            background_counts, background_errors, mask, N_channels_used,
            exposure, ebounds_lo, ebounds_hi, ebounds_add, ebounds_half,
            response, idx_background_zero, idx_background_nonzero,
            N_bkg_zero, N_bkg_nonzero, N_dets, N_chan, N_echan, max_n_chan,
            10., 1E4));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "cpl_simple_chunked_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> lcm_sym150__;
      Eigen::Matrix<double, -1, 1> lcm_sym149__;
      int lcm_sym148__;
      int lcm_sym147__;
      int lcm_sym151__;
      Eigen::Matrix<double, -1, 1> alpha;
      current_statement__ = 1;
      alpha = in__.template read_constrain_lub<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(-10, 5,
                lp__, N_intervals);
      Eigen::Matrix<double, -1, 1> log_ec;
      current_statement__ = 2;
      log_ec = in__.template read_constrain_ub<
                 Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(6, lp__,
                 N_intervals);
      Eigen::Matrix<double, -1, 1> log_K;
      current_statement__ = 3;
      log_K = in__.template read_constrain_ub<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(5, lp__,
                N_intervals);
      Eigen::Matrix<double, -1, 1> ec =
         Eigen::Matrix<double, -1, 1>::Constant(N_intervals,
           std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double, -1, 1> K =
         Eigen::Matrix<double, -1, 1>::Constant(N_intervals,
           std::numeric_limits<double>::quiet_NaN());
      out__.write(alpha);
      out__.write(log_ec);
      out__.write(log_K);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      stan::model::assign(lcm_sym150__, stan::math::pow(10, log_ec),
        "assigning variable lcm_sym150__");
      stan::model::assign(ec, lcm_sym150__, "assigning variable ec");
      stan::model::assign(lcm_sym149__, stan::math::pow(10, log_K),
        "assigning variable lcm_sym149__");
      stan::model::assign(K, lcm_sym149__, "assigning variable K");
      if (emit_transformed_parameters__) {
        out__.write(lcm_sym150__);
        out__.write(lcm_sym149__);
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int lcm_sym146__;
      int pos__;
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> alpha =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_intervals,
           DUMMY_VAR__);
      lcm_sym146__ = stan::math::logical_gte(N_intervals, 1);
      if (lcm_sym146__) {
        stan::model::assign(alpha, in__.read<local_scalar_t__>(),
          "assigning variable alpha", stan::model::index_uni(1));
        for (int sym1__ = 2; sym1__ <= N_intervals; ++sym1__) {
          stan::model::assign(alpha, in__.read<local_scalar_t__>(),
            "assigning variable alpha", stan::model::index_uni(sym1__));
        }
      } 
      out__.write_free_lub(-10, 5, alpha);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_ec =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_intervals,
           DUMMY_VAR__);
      if (lcm_sym146__) {
        stan::model::assign(log_ec, in__.read<local_scalar_t__>(),
          "assigning variable log_ec", stan::model::index_uni(1));
        for (int sym1__ = 2; sym1__ <= N_intervals; ++sym1__) {
          stan::model::assign(log_ec, in__.read<local_scalar_t__>(),
            "assigning variable log_ec", stan::model::index_uni(sym1__));
        }
      } 
      out__.write_free_ub(6, log_ec);
      Eigen::Matrix<local_scalar_t__, -1, 1> log_K =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_intervals,
           DUMMY_VAR__);
      if (lcm_sym146__) {
        stan::model::assign(log_K, in__.read<local_scalar_t__>(),
          "assigning variable log_K", stan::model::index_uni(1));
        for (int sym1__ = 2; sym1__ <= N_intervals; ++sym1__) {
          stan::model::assign(log_K, in__.read<local_scalar_t__>(),
            "assigning variable log_K", stan::model::index_uni(sym1__));
        }
      } 
      out__.write_free_ub(5, log_K);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"alpha", "log_ec", "log_K", "ec",
      "K"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(N_intervals)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(N_intervals)},
      std::vector<size_t>{static_cast<size_t>(N_intervals)},
      std::vector<size_t>{static_cast<size_t>(N_intervals)},
      std::vector<size_t>{static_cast<size_t>(N_intervals)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym220__ = 1; sym220__ <= N_intervals; ++sym220__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym220__));
      } 
    }
    for (int sym220__ = 1; sym220__ <= N_intervals; ++sym220__) {
      {
        param_names__.emplace_back(std::string() + "log_ec" + '.' + std::to_string(sym220__));
      } 
    }
    for (int sym220__ = 1; sym220__ <= N_intervals; ++sym220__) {
      {
        param_names__.emplace_back(std::string() + "log_K" + '.' + std::to_string(sym220__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym220__ = 1; sym220__ <= N_intervals; ++sym220__) {
        {
          param_names__.emplace_back(std::string() + "ec" + '.' + std::to_string(sym220__));
        } 
      }
      for (int sym220__ = 1; sym220__ <= N_intervals; ++sym220__) {
        {
          param_names__.emplace_back(std::string() + "K" + '.' + std::to_string(sym220__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym220__ = 1; sym220__ <= N_intervals; ++sym220__) {
      {
        param_names__.emplace_back(std::string() + "alpha" + '.' + std::to_string(sym220__));
      } 
    }
    for (int sym220__ = 1; sym220__ <= N_intervals; ++sym220__) {
      {
        param_names__.emplace_back(std::string() + "log_ec" + '.' + std::to_string(sym220__));
      } 
    }
    for (int sym220__ = 1; sym220__ <= N_intervals; ++sym220__) {
      {
        param_names__.emplace_back(std::string() + "log_K" + '.' + std::to_string(sym220__));
      } 
    }
    if (emit_transformed_parameters__) {
      for (int sym220__ = 1; sym220__ <= N_intervals; ++sym220__) {
        {
          param_names__.emplace_back(std::string() + "ec" + '.' + std::to_string(sym220__));
        } 
      }
      for (int sym220__ = 1; sym220__ <= N_intervals; ++sym220__) {
        {
          param_names__.emplace_back(std::string() + "K" + '.' + std::to_string(sym220__));
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_intervals) + "},\"block\":\"parameters\"},{\"name\":\"log_ec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_intervals) + "},\"block\":\"parameters\"},{\"name\":\"log_K\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_intervals) + "},\"block\":\"parameters\"},{\"name\":\"ec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_intervals) + "},\"block\":\"transformed_parameters\"},{\"name\":\"K\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_intervals) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"alpha\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_intervals) + "},\"block\":\"parameters\"},{\"name\":\"log_ec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_intervals) + "},\"block\":\"parameters\"},{\"name\":\"log_K\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_intervals) + "},\"block\":\"parameters\"},{\"name\":\"ec\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_intervals) + "},\"block\":\"transformed_parameters\"},{\"name\":\"K\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_intervals) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((N_intervals + N_intervals) + N_intervals);
      const size_t num_transformed = emit_transformed_parameters * 
  (N_intervals + N_intervals);
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((N_intervals + N_intervals) + N_intervals);
      const size_t num_transformed = emit_transformed_parameters * 
  (N_intervals + N_intervals);
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 3> names__{"alpha", "log_ec",
      "log_K"};
      const std::array<Eigen::Index, 3> constrain_param_sizes__{N_intervals,
       N_intervals, N_intervals};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = cpl_simple_chunked_model_namespace::cpl_simple_chunked_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return cpl_simple_chunked_model_namespace::profiles__;
}

#endif


