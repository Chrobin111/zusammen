
// Code generated by stanc v2.30.1
#include <stan/model/model_header.hpp>
namespace formula_test_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 27> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 2, column 4 to column 10)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 3, column 11 to column 12)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 3, column 4 to column 20)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 4, column 11 to column 12)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 4, column 4 to column 21)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 5, column 11 to column 12)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 5, column 4 to column 24)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 6, column 11 to column 12)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 6, column 4 to column 17)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 7, column 11 to column 12)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 7, column 4 to column 20)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 8, column 11 to column 12)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 8, column 4 to column 16)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 12, column 11 to column 12)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 12, column 4 to column 24)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 13, column 11 to column 12)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 13, column 4 to column 20)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 14, column 11 to column 12)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 14, column 4 to column 30)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 15, column 11 to column 12)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 15, column 4 to column 26)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 17, column 4 to column 40)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 19, column 4 to column 100)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 20, column 4 to column 43)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 22, column 4 to column 38)",
 " (in '/Users/chrobin/Documents/zusammen/zusammen/stan_models/formula_test.stan', line 23, column 4 to column 30)"};




class formula_test_model final : public model_base_crtp<formula_test_model> {

 private:
  int N;
  Eigen::Matrix<double, -1, 1> alpha_data__;
  Eigen::Matrix<double, -1, 1> log_ec_data__;
  Eigen::Matrix<double, -1, 1> log_Nrest_data__;
  Eigen::Matrix<double, -1, 1> dl_data__;
  Eigen::Matrix<double, -1, 1> gamma_data__;
  Eigen::Matrix<double, -1, 1> z_data__;
  Eigen::Matrix<double, -1, 1> log_epeak_data__;
  Eigen::Matrix<double, -1, 1> epeak_data__;
  Eigen::Matrix<double, -1, 1> log_energy_flux_data__;
  Eigen::Matrix<double, -1, 1> energy_flux_data__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> alpha{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> log_ec{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> log_Nrest{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> dl{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> gamma{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> z{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> log_epeak{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> epeak{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> log_energy_flux{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> energy_flux{nullptr, 0};
 
 public:
  ~formula_test_model() { }
  
  inline std::string model_name() const final { return "formula_test_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.30.1", "stancflags = "};
  }
  
  
  formula_test_model(stan::io::var_context& context__,
                     unsigned int random_seed__ = 0,
                     std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "formula_test_model_namespace::formula_test_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 1;
      context__.validate_dims("data initialization","N","int",
           std::vector<size_t>{});
      N = std::numeric_limits<int>::min();
      
      
      current_statement__ = 1;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 2;
      stan::math::validate_non_negative_index("alpha", "N", N);
      current_statement__ = 3;
      context__.validate_dims("data initialization","alpha","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      alpha_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&alpha) Eigen::Map<Eigen::Matrix<double, -1, 1>>(alpha_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> alpha_flat__;
        current_statement__ = 3;
        alpha_flat__ = context__.vals_r("alpha");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(alpha, alpha_flat__[(pos__ - 1)],
            "assigning variable alpha", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 4;
      stan::math::validate_non_negative_index("log_ec", "N", N);
      current_statement__ = 5;
      context__.validate_dims("data initialization","log_ec","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      log_ec_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&log_ec) Eigen::Map<Eigen::Matrix<double, -1, 1>>(log_ec_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> log_ec_flat__;
        current_statement__ = 5;
        log_ec_flat__ = context__.vals_r("log_ec");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(log_ec, log_ec_flat__[(pos__ - 1)],
            "assigning variable log_ec", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 6;
      stan::math::validate_non_negative_index("log_Nrest", "N", N);
      current_statement__ = 7;
      context__.validate_dims("data initialization","log_Nrest","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      log_Nrest_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&log_Nrest) Eigen::Map<Eigen::Matrix<double, -1, 1>>(log_Nrest_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> log_Nrest_flat__;
        current_statement__ = 7;
        log_Nrest_flat__ = context__.vals_r("log_Nrest");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 7;
          stan::model::assign(log_Nrest, log_Nrest_flat__[(pos__ - 1)],
            "assigning variable log_Nrest", stan::model::index_uni(sym1__));
          current_statement__ = 7;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 8;
      stan::math::validate_non_negative_index("dl", "N", N);
      current_statement__ = 9;
      context__.validate_dims("data initialization","dl","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      dl_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&dl) Eigen::Map<Eigen::Matrix<double, -1, 1>>(dl_data__.data(), N);
      
      {
        std::vector<local_scalar_t__> dl_flat__;
        current_statement__ = 9;
        dl_flat__ = context__.vals_r("dl");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 9;
          stan::model::assign(dl, dl_flat__[(pos__ - 1)],
            "assigning variable dl", stan::model::index_uni(sym1__));
          current_statement__ = 9;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 10;
      stan::math::validate_non_negative_index("gamma", "N", N);
      current_statement__ = 11;
      context__.validate_dims("data initialization","gamma","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      gamma_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&gamma) Eigen::Map<Eigen::Matrix<double, -1, 1>>(gamma_data__.data(), N);
        
      
      {
        std::vector<local_scalar_t__> gamma_flat__;
        current_statement__ = 11;
        gamma_flat__ = context__.vals_r("gamma");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 11;
          stan::model::assign(gamma, gamma_flat__[(pos__ - 1)],
            "assigning variable gamma", stan::model::index_uni(sym1__));
          current_statement__ = 11;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 12;
      stan::math::validate_non_negative_index("z", "N", N);
      current_statement__ = 13;
      context__.validate_dims("data initialization","z","double",
           std::vector<size_t>{static_cast<size_t>(N)});
      z_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&z) Eigen::Map<Eigen::Matrix<double, -1, 1>>(z_data__.data(), N);
      
      {
        std::vector<local_scalar_t__> z_flat__;
        current_statement__ = 13;
        z_flat__ = context__.vals_r("z");
        current_statement__ = 13;
        pos__ = 1;
        current_statement__ = 13;
        for (int sym1__ = 1; sym1__ <= N; ++sym1__) {
          current_statement__ = 13;
          stan::model::assign(z, z_flat__[(pos__ - 1)],
            "assigning variable z", stan::model::index_uni(sym1__));
          current_statement__ = 13;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 14;
      stan::math::validate_non_negative_index("log_epeak", "N", N);
      current_statement__ = 15;
      log_epeak_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&log_epeak) Eigen::Map<Eigen::Matrix<double, -1, 1>>(log_epeak_data__.data(), N);
        
      
      current_statement__ = 16;
      stan::math::validate_non_negative_index("epeak", "N", N);
      current_statement__ = 17;
      epeak_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&epeak) Eigen::Map<Eigen::Matrix<double, -1, 1>>(epeak_data__.data(), N);
        
      
      current_statement__ = 18;
      stan::math::validate_non_negative_index("log_energy_flux", "N", N);
      current_statement__ = 19;
      log_energy_flux_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&log_energy_flux) Eigen::Map<Eigen::Matrix<double, -1, 1>>(log_energy_flux_data__.data(), N);
        
      
      current_statement__ = 20;
      stan::math::validate_non_negative_index("energy_flux", "N", N);
      current_statement__ = 21;
      energy_flux_data__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N,
          std::numeric_limits<double>::quiet_NaN());
      new (&energy_flux) Eigen::Map<Eigen::Matrix<double, -1, 1>>(energy_flux_data__.data(), N);
        
      
      current_statement__ = 22;
      stan::model::assign(log_epeak,
        stan::math::add(stan::math::log10(stan::math::add(2, alpha)), log_ec),
        "assigning variable log_epeak");
      current_statement__ = 23;
      stan::model::assign(log_energy_flux,
        stan::math::add(
          stan::math::subtract(log_Nrest,
            stan::math::add(1.099,
              stan::math::multiply(2, stan::math::log10(dl)))),
          stan::math::elt_multiply(gamma,
            stan::math::subtract(
              stan::math::add(stan::math::log10(stan::math::add(1, z)),
                log_epeak), 2))), "assigning variable log_energy_flux");
      current_statement__ = 24;
      stan::model::assign(energy_flux, stan::math::pow(10, log_energy_flux),
        "assigning variable energy_flux");
      current_statement__ = 25;
      if (pstream__) {
        stan::math::stan_print(pstream__, log_epeak);
        stan::math::stan_print(pstream__, log_energy_flux);
        stan::math::stan_print(pstream__, "\n");
      }
      current_statement__ = 26;
      if (pstream__) {
        stan::math::stan_print(pstream__, epeak);
        stan::math::stan_print(pstream__, energy_flux);
        stan::math::stan_print(pstream__, "\n");
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 0U;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "formula_test_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "formula_test_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 0;
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * 0;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 0> names__{};
      const std::array<Eigen::Index, 0> constrain_param_sizes__{};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = formula_test_model_namespace::formula_test_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return formula_test_model_namespace::profiles__;
}

#endif


